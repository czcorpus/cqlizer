// Code generated by pigeon; DO NOT EDIT.

package cql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

func ParseCQL(file string, data string) (*Query, error) {
	return ParseCQLBytes(file, []byte(data))
}

func ParseCQLBytes(file string, data []byte) (*Query, error) {
	tmp, err := Parse(file, data)
	if err != nil {
		return nil, err
	}
	ans, ok := tmp.(*Query)
	if !ok {
		panic("internal parser error - incorrect query type")
	}
	return ans, nil
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Query",
			pos:  position{line: 34, col: 1, offset: 800},
			expr: &actionExpr{
				pos: position{line: 35, col: 5, offset: 813},
				run: (*parser).callonQuery1,
				expr: &seqExpr{
					pos: position{line: 35, col: 5, offset: 813},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 35, col: 5, offset: 813},
							label: "sq",
							expr: &ruleRefExpr{
								pos:  position{line: 35, col: 8, offset: 816},
								name: "Sequence",
							},
						},
						&labeledExpr{
							pos:   position{line: 35, col: 17, offset: 825},
							label: "gp",
							expr: &zeroOrOneExpr{
								pos: position{line: 35, col: 20, offset: 828},
								expr: &seqExpr{
									pos: position{line: 35, col: 21, offset: 829},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 35, col: 21, offset: 829},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 35, col: 23, offset: 831},
											name: "BINAND",
										},
										&ruleRefExpr{
											pos:  position{line: 35, col: 30, offset: 838},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 35, col: 32, offset: 840},
											name: "GlobPart",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 35, col: 43, offset: 851},
							label: "wc",
							expr: &zeroOrMoreExpr{
								pos: position{line: 35, col: 46, offset: 854},
								expr: &seqExpr{
									pos: position{line: 35, col: 47, offset: 855},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 35, col: 47, offset: 855},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 35, col: 49, offset: 857},
											name: "WithinOrContaining",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 35, col: 70, offset: 878},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "WithinOrContaining",
			pos:  position{line: 58, col: 1, offset: 1548},
			expr: &actionExpr{
				pos: position{line: 59, col: 5, offset: 1574},
				run: (*parser).callonWithinOrContaining1,
				expr: &seqExpr{
					pos: position{line: 59, col: 5, offset: 1574},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 59, col: 5, offset: 1574},
							expr: &ruleRefExpr{
								pos:  position{line: 59, col: 5, offset: 1574},
								name: "NOT",
							},
						},
						&labeledExpr{
							pos:   position{line: 59, col: 10, offset: 1579},
							label: "tp",
							expr: &choiceExpr{
								pos: position{line: 59, col: 14, offset: 1583},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 59, col: 14, offset: 1583},
										name: "KW_WITHIN",
									},
									&ruleRefExpr{
										pos:  position{line: 59, col: 26, offset: 1595},
										name: "KW_CONTAINING",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 41, offset: 1610},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 59, col: 43, offset: 1612},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 59, col: 45, offset: 1614},
								name: "WithinContainingPart",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPart",
			pos:  position{line: 67, col: 1, offset: 1818},
			expr: &actionExpr{
				pos: position{line: 68, col: 5, offset: 1834},
				run: (*parser).callonGlobPart1,
				expr: &seqExpr{
					pos: position{line: 68, col: 5, offset: 1834},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 68, col: 5, offset: 1834},
							label: "gc1",
							expr: &ruleRefExpr{
								pos:  position{line: 68, col: 9, offset: 1838},
								name: "GlobCond",
							},
						},
						&labeledExpr{
							pos:   position{line: 68, col: 18, offset: 1847},
							label: "gc2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 68, col: 22, offset: 1851},
								expr: &seqExpr{
									pos: position{line: 68, col: 23, offset: 1852},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 68, col: 23, offset: 1852},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 68, col: 25, offset: 1854},
											name: "BINAND",
										},
										&ruleRefExpr{
											pos:  position{line: 68, col: 32, offset: 1861},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 68, col: 34, offset: 1863},
											name: "GlobCond",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobCond",
			pos:  position{line: 83, col: 1, offset: 2302},
			expr: &choiceExpr{
				pos: position{line: 84, col: 5, offset: 2318},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2318},
						run: (*parser).callonGlobCond2,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2318},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 84, col: 5, offset: 2318},
									label: "n1",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 8, offset: 2321},
										name: "NUMBER",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 84, col: 15, offset: 2328},
									name: "DOT",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 19, offset: 2332},
									label: "an3",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 23, offset: 2336},
										name: "AttName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 84, col: 31, offset: 2344},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 33, offset: 2346},
									label: "nt4",
									expr: &zeroOrOneExpr{
										pos: position{line: 84, col: 37, offset: 2350},
										expr: &ruleRefExpr{
											pos:  position{line: 84, col: 37, offset: 2350},
											name: "NOT",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 84, col: 42, offset: 2355},
									label: "eq5",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 46, offset: 2359},
										name: "EQ",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 84, col: 49, offset: 2362},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 51, offset: 2364},
									label: "n6",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 54, offset: 2367},
										name: "NUMBER",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 84, col: 61, offset: 2374},
									name: "DOT",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 65, offset: 2378},
									label: "an8",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 69, offset: 2382},
										name: "AttName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 94, col: 5, offset: 2735},
						run: (*parser).callonGlobCond21,
						expr: &seqExpr{
							pos: position{line: 94, col: 5, offset: 2735},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 94, col: 5, offset: 2735},
									name: "KW_FREQ",
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 13, offset: 2743},
									name: "LPAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 20, offset: 2750},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 94, col: 22, offset: 2752},
									label: "n2",
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 25, offset: 2755},
										name: "NUMBER",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 32, offset: 2762},
									name: "DOT",
								},
								&labeledExpr{
									pos:   position{line: 94, col: 36, offset: 2766},
									label: "an3",
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 40, offset: 2770},
										name: "AttName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 48, offset: 2778},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 50, offset: 2780},
									name: "RPAREN",
								},
								&zeroOrOneExpr{
									pos: position{line: 94, col: 57, offset: 2787},
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 57, offset: 2787},
										name: "NOT",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 62, offset: 2792},
									name: "_",
								},
								&choiceExpr{
									pos: position{line: 94, col: 66, offset: 2796},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 94, col: 66, offset: 2796},
											name: "EQ",
										},
										&ruleRefExpr{
											pos:  position{line: 94, col: 71, offset: 2801},
											name: "LEQ",
										},
										&ruleRefExpr{
											pos:  position{line: 94, col: 77, offset: 2807},
											name: "GEQ",
										},
										&ruleRefExpr{
											pos:  position{line: 94, col: 83, offset: 2813},
											name: "LSTRUCT",
										},
										&ruleRefExpr{
											pos:  position{line: 94, col: 93, offset: 2823},
											name: "RSTRUCT",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 103, offset: 2833},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 105, offset: 2835},
									name: "NUMBER",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WithinContainingPart",
			pos:  position{line: 105, col: 1, offset: 3066},
			expr: &choiceExpr{
				pos: position{line: 106, col: 5, offset: 3094},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 106, col: 5, offset: 3094},
						run: (*parser).callonWithinContainingPart2,
						expr: &labeledExpr{
							pos:   position{line: 106, col: 5, offset: 3094},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 7, offset: 3096},
								name: "Sequence",
							},
						},
					},
					&actionExpr{
						pos: position{line: 114, col: 7, offset: 3313},
						run: (*parser).callonWithinContainingPart5,
						expr: &labeledExpr{
							pos:   position{line: 114, col: 7, offset: 3313},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 9, offset: 3315},
								name: "WithinNumber",
							},
						},
					},
					&actionExpr{
						pos: position{line: 123, col: 7, offset: 3545},
						run: (*parser).callonWithinContainingPart8,
						expr: &seqExpr{
							pos: position{line: 123, col: 7, offset: 3545},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 123, col: 7, offset: 3545},
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 7, offset: 3545},
										name: "NOT",
									},
								},
								&labeledExpr{
									pos:   position{line: 123, col: 12, offset: 3550},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 14, offset: 3552},
										name: "AlignedPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Structure",
			pos:  position{line: 133, col: 1, offset: 3774},
			expr: &actionExpr{
				pos: position{line: 134, col: 5, offset: 3791},
				run: (*parser).callonStructure1,
				expr: &seqExpr{
					pos: position{line: 134, col: 5, offset: 3791},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 134, col: 5, offset: 3791},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 134, col: 7, offset: 3793},
								name: "AttName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 134, col: 15, offset: 3801},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 17, offset: 3803},
							label: "v",
							expr: &zeroOrOneExpr{
								pos: position{line: 134, col: 19, offset: 3805},
								expr: &ruleRefExpr{
									pos:  position{line: 134, col: 19, offset: 3805},
									name: "AttValList",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NumberedPosition",
			pos:  position{line: 143, col: 1, offset: 3988},
			expr: &actionExpr{
				pos: position{line: 144, col: 5, offset: 4012},
				run: (*parser).callonNumberedPosition1,
				expr: &seqExpr{
					pos: position{line: 144, col: 5, offset: 4012},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 144, col: 5, offset: 4012},
							name: "NUMBER",
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 12, offset: 4019},
							name: "COLON",
						},
						&labeledExpr{
							pos:   position{line: 144, col: 18, offset: 4025},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 21, offset: 4028},
								name: "OnePosition",
							},
						},
					},
				},
			},
		},
		{
			name: "Position",
			pos:  position{line: 152, col: 1, offset: 4175},
			expr: &choiceExpr{
				pos: position{line: 153, col: 5, offset: 4191},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4191},
						run: (*parser).callonPosition2,
						expr: &labeledExpr{
							pos:   position{line: 153, col: 5, offset: 4191},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 153, col: 8, offset: 4194},
								name: "OnePosition",
							},
						},
					},
					&actionExpr{
						pos: position{line: 161, col: 7, offset: 4441},
						run: (*parser).callonPosition5,
						expr: &labeledExpr{
							pos:   position{line: 161, col: 7, offset: 4441},
							label: "np",
							expr: &ruleRefExpr{
								pos:  position{line: 161, col: 10, offset: 4444},
								name: "NumberedPosition",
							},
						},
					},
				},
			},
		},
		{
			name: "OnePosition",
			pos:  position{line: 170, col: 1, offset: 4701},
			expr: &choiceExpr{
				pos: position{line: 171, col: 5, offset: 4720},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 171, col: 5, offset: 4720},
						run: (*parser).callonOnePosition2,
						expr: &seqExpr{
							pos: position{line: 171, col: 5, offset: 4720},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 171, col: 5, offset: 4720},
									name: "LBRACKET",
								},
								&ruleRefExpr{
									pos:  position{line: 171, col: 14, offset: 4729},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 171, col: 16, offset: 4731},
									label: "alist",
									expr: &zeroOrOneExpr{
										pos: position{line: 171, col: 22, offset: 4737},
										expr: &ruleRefExpr{
											pos:  position{line: 171, col: 22, offset: 4737},
											name: "AttValList",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 171, col: 34, offset: 4749},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 171, col: 36, offset: 4751},
									name: "RBRACKET",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 7, offset: 5025},
						run: (*parser).callonOnePosition11,
						expr: &labeledExpr{
							pos:   position{line: 181, col: 7, offset: 5025},
							label: "rg",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 10, offset: 5028},
								name: "RegExp",
							},
						},
					},
					&actionExpr{
						pos: position{line: 191, col: 7, offset: 5289},
						run: (*parser).callonOnePosition14,
						expr: &seqExpr{
							pos: position{line: 191, col: 7, offset: 5289},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 191, col: 7, offset: 5289},
									name: "TEQ",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 11, offset: 5293},
									label: "num",
									expr: &zeroOrOneExpr{
										pos: position{line: 191, col: 15, offset: 5297},
										expr: &ruleRefExpr{
											pos:  position{line: 191, col: 15, offset: 5297},
											name: "NUMBER",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 191, col: 23, offset: 5305},
									label: "rg",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 26, offset: 5308},
										name: "RegExp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 202, col: 7, offset: 5621},
						run: (*parser).callonOnePosition22,
						expr: &ruleRefExpr{
							pos:  position{line: 202, col: 7, offset: 5621},
							name: "KW_MU",
						},
					},
					&actionExpr{
						pos: position{line: 207, col: 7, offset: 5696},
						run: (*parser).callonOnePosition24,
						expr: &labeledExpr{
							pos:   position{line: 207, col: 7, offset: 5696},
							label: "mu",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 10, offset: 5699},
								name: "MuPart",
							},
						},
					},
				},
			},
		},
		{
			name: "MuPart",
			pos:  position{line: 220, col: 1, offset: 5953},
			expr: &actionExpr{
				pos: position{line: 221, col: 5, offset: 5967},
				run: (*parser).callonMuPart1,
				expr: &seqExpr{
					pos: position{line: 221, col: 5, offset: 5967},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 221, col: 5, offset: 5967},
							name: "LPAREN",
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 12, offset: 5974},
							name: "_",
						},
						&choiceExpr{
							pos: position{line: 221, col: 15, offset: 5977},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 221, col: 15, offset: 5977},
									name: "UnionOp",
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 25, offset: 5987},
									name: "MeetOp",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 33, offset: 5995},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 35, offset: 5997},
							name: "RPAREN",
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 227, col: 1, offset: 6071},
			expr: &choiceExpr{
				pos: position{line: 228, col: 5, offset: 6086},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6086},
						name: "NUMBER",
					},
					&actionExpr{
						pos: position{line: 228, col: 14, offset: 6095},
						run: (*parser).callonInteger3,
						expr: &ruleRefExpr{
							pos:  position{line: 228, col: 14, offset: 6095},
							name: "NNUMBER",
						},
					},
				},
			},
		},
		{
			name: "MeetOp",
			pos:  position{line: 232, col: 1, offset: 6147},
			expr: &seqExpr{
				pos: position{line: 233, col: 5, offset: 6161},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6161},
						name: "KW_MEET",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 13, offset: 6169},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 15, offset: 6171},
						name: "Position",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 24, offset: 6180},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 26, offset: 6182},
						name: "Position",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 35, offset: 6191},
						name: "_",
					},
					&zeroOrOneExpr{
						pos: position{line: 233, col: 37, offset: 6193},
						expr: &seqExpr{
							pos: position{line: 233, col: 38, offset: 6194},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 233, col: 38, offset: 6194},
									name: "Integer",
								},
								&ruleRefExpr{
									pos:  position{line: 233, col: 46, offset: 6202},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 233, col: 48, offset: 6204},
									name: "Integer",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnionOp",
			pos:  position{line: 235, col: 1, offset: 6215},
			expr: &seqExpr{
				pos: position{line: 236, col: 5, offset: 6230},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6230},
						name: "KW_UNION",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 14, offset: 6239},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 16, offset: 6241},
						name: "Position",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 25, offset: 6250},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 27, offset: 6252},
						name: "Position",
					},
				},
			},
		},
		{
			name: "Sequence",
			pos:  position{line: 240, col: 1, offset: 6333},
			expr: &choiceExpr{
				pos: position{line: 241, col: 5, offset: 6349},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 241, col: 5, offset: 6349},
						run: (*parser).callonSequence2,
						expr: &seqExpr{
							pos: position{line: 241, col: 5, offset: 6349},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 241, col: 5, offset: 6349},
									label: "s1",
									expr: &ruleRefExpr{
										pos:  position{line: 241, col: 8, offset: 6352},
										name: "Seq",
									},
								},
								&labeledExpr{
									pos:   position{line: 241, col: 12, offset: 6356},
									label: "s2",
									expr: &zeroOrMoreExpr{
										pos: position{line: 241, col: 15, offset: 6359},
										expr: &seqExpr{
											pos: position{line: 241, col: 16, offset: 6360},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 241, col: 16, offset: 6360},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 241, col: 18, offset: 6362},
													name: "BINOR",
												},
												&ruleRefExpr{
													pos:  position{line: 241, col: 24, offset: 6368},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 241, col: 26, offset: 6370},
													name: "Seq",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 251, col: 7, offset: 6623},
						run: (*parser).callonSequence13,
						expr: &labeledExpr{
							pos:   position{line: 251, col: 7, offset: 6623},
							label: "s1",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 10, offset: 6626},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Seq",
			pos:  position{line: 260, col: 1, offset: 6815},
			expr: &actionExpr{
				pos: position{line: 261, col: 5, offset: 6826},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 261, col: 5, offset: 6826},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 261, col: 5, offset: 6826},
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 5, offset: 6826},
								name: "NOT",
							},
						},
						&labeledExpr{
							pos:   position{line: 261, col: 10, offset: 6831},
							label: "r1",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 13, offset: 6834},
								name: "Repetition",
							},
						},
						&labeledExpr{
							pos:   position{line: 261, col: 24, offset: 6845},
							label: "r2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 27, offset: 6848},
								expr: &seqExpr{
									pos: position{line: 261, col: 28, offset: 6849},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 261, col: 28, offset: 6849},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 261, col: 30, offset: 6851},
											name: "Repetition",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Repetition",
			pos:  position{line: 276, col: 1, offset: 7287},
			expr: &choiceExpr{
				pos: position{line: 277, col: 5, offset: 7305},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 277, col: 5, offset: 7305},
						run: (*parser).callonRepetition2,
						expr: &seqExpr{
							pos: position{line: 277, col: 5, offset: 7305},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 277, col: 5, offset: 7305},
									label: "aq",
									expr: &ruleRefExpr{
										pos:  position{line: 277, col: 8, offset: 7308},
										name: "AtomQuery",
									},
								},
								&labeledExpr{
									pos:   position{line: 277, col: 18, offset: 7318},
									label: "ro",
									expr: &zeroOrOneExpr{
										pos: position{line: 277, col: 21, offset: 7321},
										expr: &ruleRefExpr{
											pos:  position{line: 277, col: 21, offset: 7321},
											name: "RepOpt",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 287, col: 7, offset: 7571},
						run: (*parser).callonRepetition9,
						expr: &labeledExpr{
							pos:   position{line: 287, col: 7, offset: 7571},
							label: "ost",
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 11, offset: 7575},
								name: "OpenStructTag",
							},
						},
					},
					&actionExpr{
						pos: position{line: 297, col: 7, offset: 7856},
						run: (*parser).callonRepetition12,
						expr: &labeledExpr{
							pos:   position{line: 297, col: 7, offset: 7856},
							label: "cst",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 11, offset: 7860},
								name: "CloseStructTag",
							},
						},
					},
				},
			},
		},
		{
			name: "OpenStructTag",
			pos:  position{line: 308, col: 1, offset: 8139},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 8160},
				run: (*parser).callonOpenStructTag1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 8160},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 309, col: 5, offset: 8160},
							name: "LSTRUCT",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 13, offset: 8168},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 15, offset: 8170},
								name: "Structure",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 25, offset: 8180},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 309, col: 27, offset: 8182},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 27, offset: 8182},
								name: "SLASH",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 34, offset: 8189},
							name: "RSTRUCT",
						},
					},
				},
			},
		},
		{
			name: "CloseStructTag",
			pos:  position{line: 317, col: 1, offset: 8324},
			expr: &actionExpr{
				pos: position{line: 318, col: 5, offset: 8346},
				run: (*parser).callonCloseStructTag1,
				expr: &seqExpr{
					pos: position{line: 318, col: 5, offset: 8346},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 318, col: 5, offset: 8346},
							name: "LSTRUCT",
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 13, offset: 8354},
							name: "SLASH",
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 19, offset: 8360},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 21, offset: 8362},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 23, offset: 8364},
								name: "Structure",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 33, offset: 8374},
							name: "RSTRUCT",
						},
					},
				},
			},
		},
		{
			name: "AtomQuery",
			pos:  position{line: 326, col: 1, offset: 8510},
			expr: &choiceExpr{
				pos: position{line: 327, col: 5, offset: 8527},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 8527},
						run: (*parser).callonAtomQuery2,
						expr: &labeledExpr{
							pos:   position{line: 327, col: 5, offset: 8527},
							label: "pos",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 9, offset: 8531},
								name: "Position",
							},
						},
					},
					&actionExpr{
						pos: position{line: 337, col: 7, offset: 8799},
						run: (*parser).callonAtomQuery5,
						expr: &seqExpr{
							pos: position{line: 337, col: 7, offset: 8799},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 337, col: 7, offset: 8799},
									name: "LPAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 337, col: 14, offset: 8806},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 337, col: 16, offset: 8808},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 337, col: 20, offset: 8812},
										name: "Sequence",
									},
								},
								&labeledExpr{
									pos:   position{line: 337, col: 29, offset: 8821},
									label: "wcp",
									expr: &zeroOrMoreExpr{
										pos: position{line: 337, col: 33, offset: 8825},
										expr: &seqExpr{
											pos: position{line: 337, col: 34, offset: 8826},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 337, col: 34, offset: 8826},
													name: "_",
												},
												&zeroOrOneExpr{
													pos: position{line: 337, col: 36, offset: 8828},
													expr: &ruleRefExpr{
														pos:  position{line: 337, col: 36, offset: 8828},
														name: "NOT",
													},
												},
												&choiceExpr{
													pos: position{line: 337, col: 42, offset: 8834},
													alternatives: []any{
														&ruleRefExpr{
															pos:  position{line: 337, col: 42, offset: 8834},
															name: "KW_WITHIN",
														},
														&ruleRefExpr{
															pos:  position{line: 337, col: 54, offset: 8846},
															name: "KW_CONTAINING",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 337, col: 69, offset: 8861},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 337, col: 71, offset: 8863},
													name: "WithinContainingPart",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 337, col: 94, offset: 8886},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 337, col: 96, offset: 8888},
									name: "RPAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AlignedPart",
			pos:  position{line: 348, col: 1, offset: 9149},
			expr: &seqExpr{
				pos: position{line: 349, col: 5, offset: 9168},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 349, col: 5, offset: 9168},
						name: "AttName",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 13, offset: 9176},
						name: "COLON",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 19, offset: 9182},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 21, offset: 9184},
						name: "Sequence",
					},
				},
			},
		},
		{
			name: "AttValList",
			pos:  position{line: 351, col: 1, offset: 9217},
			expr: &actionExpr{
				pos: position{line: 352, col: 5, offset: 9235},
				run: (*parser).callonAttValList1,
				expr: &seqExpr{
					pos: position{line: 352, col: 5, offset: 9235},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 352, col: 5, offset: 9235},
							label: "av1",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 9, offset: 9239},
								name: "AttValAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 352, col: 19, offset: 9249},
							label: "av2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 352, col: 23, offset: 9253},
								expr: &seqExpr{
									pos: position{line: 352, col: 24, offset: 9254},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 352, col: 24, offset: 9254},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 352, col: 26, offset: 9256},
											name: "BINOR",
										},
										&ruleRefExpr{
											pos:  position{line: 352, col: 32, offset: 9262},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 352, col: 34, offset: 9264},
											name: "AttValAnd",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttValAnd",
			pos:  position{line: 367, col: 1, offset: 9714},
			expr: &actionExpr{
				pos: position{line: 368, col: 5, offset: 9731},
				run: (*parser).callonAttValAnd1,
				expr: &seqExpr{
					pos: position{line: 368, col: 5, offset: 9731},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 368, col: 5, offset: 9731},
							label: "av1",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 9, offset: 9735},
								name: "AttVal",
							},
						},
						&labeledExpr{
							pos:   position{line: 368, col: 16, offset: 9742},
							label: "av2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 368, col: 20, offset: 9746},
								expr: &seqExpr{
									pos: position{line: 368, col: 21, offset: 9747},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 368, col: 21, offset: 9747},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 368, col: 23, offset: 9749},
											name: "BINAND",
										},
										&ruleRefExpr{
											pos:  position{line: 368, col: 30, offset: 9756},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 368, col: 32, offset: 9758},
											name: "AttVal",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttVal",
			pos:  position{line: 382, col: 1, offset: 10178},
			expr: &choiceExpr{
				pos: position{line: 383, col: 5, offset: 10192},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 383, col: 5, offset: 10192},
						run: (*parser).callonAttVal2,
						expr: &seqExpr{
							pos: position{line: 383, col: 5, offset: 10192},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 383, col: 5, offset: 10192},
									label: "an",
									expr: &ruleRefExpr{
										pos:  position{line: 383, col: 8, offset: 10195},
										name: "AttName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 383, col: 16, offset: 10203},
									name: "_",
								},
								&zeroOrOneExpr{
									pos: position{line: 383, col: 18, offset: 10205},
									expr: &ruleRefExpr{
										pos:  position{line: 383, col: 19, offset: 10206},
										name: "NOT",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 383, col: 25, offset: 10212},
									name: "EEQ",
								},
								&ruleRefExpr{
									pos:  position{line: 383, col: 29, offset: 10216},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 383, col: 31, offset: 10218},
									label: "rs",
									expr: &ruleRefExpr{
										pos:  position{line: 383, col: 34, offset: 10221},
										name: "RawString",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 394, col: 7, offset: 10522},
						run: (*parser).callonAttVal13,
						expr: &seqExpr{
							pos: position{line: 394, col: 7, offset: 10522},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 394, col: 7, offset: 10522},
									label: "an",
									expr: &ruleRefExpr{
										pos:  position{line: 394, col: 10, offset: 10525},
										name: "AttName",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 394, col: 18, offset: 10533},
									expr: &seqExpr{
										pos: position{line: 394, col: 19, offset: 10534},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 394, col: 19, offset: 10534},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 394, col: 21, offset: 10536},
												name: "NOT",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 394, col: 27, offset: 10542},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 394, col: 29, offset: 10544},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 394, col: 33, offset: 10548},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 394, col: 33, offset: 10548},
												name: "EQ",
											},
											&ruleRefExpr{
												pos:  position{line: 394, col: 38, offset: 10553},
												name: "LEQ",
											},
											&ruleRefExpr{
												pos:  position{line: 394, col: 44, offset: 10559},
												name: "GEQ",
											},
											&seqExpr{
												pos: position{line: 394, col: 50, offset: 10565},
												exprs: []any{
													&ruleRefExpr{
														pos:  position{line: 394, col: 50, offset: 10565},
														name: "TEQ",
													},
													&zeroOrOneExpr{
														pos: position{line: 394, col: 54, offset: 10569},
														expr: &ruleRefExpr{
															pos:  position{line: 394, col: 54, offset: 10569},
															name: "NUMBER",
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 394, col: 63, offset: 10578},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 394, col: 65, offset: 10580},
									label: "rg",
									expr: &ruleRefExpr{
										pos:  position{line: 394, col: 68, offset: 10583},
										name: "RegExp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 405, col: 7, offset: 10877},
						run: (*parser).callonAttVal34,
						expr: &seqExpr{
							pos: position{line: 405, col: 7, offset: 10877},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 405, col: 7, offset: 10877},
									name: "POSNUM",
								},
								&ruleRefExpr{
									pos:  position{line: 405, col: 14, offset: 10884},
									name: "NUMBER",
								},
								&ruleRefExpr{
									pos:  position{line: 405, col: 21, offset: 10891},
									name: "DASH",
								},
								&ruleRefExpr{
									pos:  position{line: 405, col: 26, offset: 10896},
									name: "NUMBER",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 410, col: 7, offset: 10967},
						run: (*parser).callonAttVal40,
						expr: &seqExpr{
							pos: position{line: 410, col: 7, offset: 10967},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 410, col: 7, offset: 10967},
									name: "POSNUM",
								},
								&ruleRefExpr{
									pos:  position{line: 410, col: 14, offset: 10974},
									name: "NUMBER",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 415, col: 7, offset: 11045},
						run: (*parser).callonAttVal44,
						expr: &seqExpr{
							pos: position{line: 415, col: 7, offset: 11045},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 415, col: 7, offset: 11045},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 11, offset: 11049},
									name: "AttVal",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 420, col: 7, offset: 11120},
						run: (*parser).callonAttVal48,
						expr: &seqExpr{
							pos: position{line: 420, col: 7, offset: 11120},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 420, col: 7, offset: 11120},
									name: "LPAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 420, col: 14, offset: 11127},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 420, col: 16, offset: 11129},
									name: "AttValList",
								},
								&ruleRefExpr{
									pos:  position{line: 420, col: 27, offset: 11140},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 420, col: 29, offset: 11142},
									name: "RPAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 426, col: 7, offset: 11274},
						run: (*parser).callonAttVal55,
						expr: &seqExpr{
							pos: position{line: 426, col: 7, offset: 11274},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 426, col: 8, offset: 11275},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 426, col: 8, offset: 11275},
											name: "KW_WS",
										},
										&ruleRefExpr{
											pos:  position{line: 426, col: 16, offset: 11283},
											name: "KW_TERM",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 426, col: 25, offset: 11292},
									name: "LPAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 426, col: 32, offset: 11299},
									name: "_",
								},
								&choiceExpr{
									pos: position{line: 426, col: 35, offset: 11302},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 426, col: 35, offset: 11302},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 426, col: 35, offset: 11302},
													name: "NUMBER",
												},
												&ruleRefExpr{
													pos:  position{line: 426, col: 42, offset: 11309},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 426, col: 48, offset: 11315},
													name: "NUMBER",
												},
											},
										},
										&seqExpr{
											pos: position{line: 426, col: 57, offset: 11324},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 426, col: 57, offset: 11324},
													name: "RegExp",
												},
												&ruleRefExpr{
													pos:  position{line: 426, col: 64, offset: 11331},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 426, col: 70, offset: 11337},
													name: "RegExp",
												},
												&ruleRefExpr{
													pos:  position{line: 426, col: 77, offset: 11344},
													name: "COMMA",
												},
												&ruleRefExpr{
													pos:  position{line: 426, col: 83, offset: 11350},
													name: "RegExp",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 426, col: 91, offset: 11358},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 426, col: 93, offset: 11360},
									name: "RPAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 432, col: 7, offset: 11492},
						run: (*parser).callonAttVal75,
						expr: &seqExpr{
							pos: position{line: 432, col: 7, offset: 11492},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 432, col: 7, offset: 11492},
									name: "KW_SWAP",
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 15, offset: 11500},
									name: "LPAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 22, offset: 11507},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 24, offset: 11509},
									name: "NUMBER",
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 31, offset: 11516},
									name: "COMMA",
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 37, offset: 11522},
									name: "AttValList",
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 48, offset: 11533},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 50, offset: 11535},
									name: "RPAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 439, col: 7, offset: 11668},
						run: (*parser).callonAttVal85,
						expr: &seqExpr{
							pos: position{line: 439, col: 7, offset: 11668},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 439, col: 7, offset: 11668},
									name: "KW_CCOLL",
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 16, offset: 11677},
									name: "LPAREN",
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 23, offset: 11684},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 25, offset: 11686},
									name: "NUMBER",
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 32, offset: 11693},
									name: "COMMA",
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 38, offset: 11699},
									name: "NUMBER",
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 45, offset: 11706},
									name: "COMMA",
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 51, offset: 11712},
									name: "AttValList",
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 62, offset: 11723},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 64, offset: 11725},
									name: "RPAREN",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WithinNumber",
			pos:  position{line: 446, col: 1, offset: 11852},
			expr: &ruleRefExpr{
				pos:  position{line: 447, col: 5, offset: 11872},
				name: "NUMBER",
			},
		},
		{
			name: "RepOpt",
			pos:  position{line: 449, col: 1, offset: 11880},
			expr: &choiceExpr{
				pos: position{line: 450, col: 5, offset: 11894},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 450, col: 5, offset: 11894},
						run: (*parser).callonRepOpt2,
						expr: &ruleRefExpr{
							pos:  position{line: 450, col: 5, offset: 11894},
							name: "STAR",
						},
					},
					&actionExpr{
						pos: position{line: 453, col: 7, offset: 11948},
						run: (*parser).callonRepOpt4,
						expr: &ruleRefExpr{
							pos:  position{line: 453, col: 7, offset: 11948},
							name: "PLUS",
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 7, offset: 12002},
						run: (*parser).callonRepOpt6,
						expr: &ruleRefExpr{
							pos:  position{line: 456, col: 7, offset: 12002},
							name: "QUEST",
						},
					},
					&actionExpr{
						pos: position{line: 459, col: 7, offset: 12057},
						run: (*parser).callonRepOpt8,
						expr: &seqExpr{
							pos: position{line: 459, col: 7, offset: 12057},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 459, col: 7, offset: 12057},
									name: "LBRACE",
								},
								&ruleRefExpr{
									pos:  position{line: 459, col: 14, offset: 12064},
									name: "NUMBER",
								},
								&zeroOrOneExpr{
									pos: position{line: 459, col: 21, offset: 12071},
									expr: &seqExpr{
										pos: position{line: 459, col: 22, offset: 12072},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 459, col: 22, offset: 12072},
												name: "COMMA",
											},
											&zeroOrOneExpr{
												pos: position{line: 459, col: 28, offset: 12078},
												expr: &ruleRefExpr{
													pos:  position{line: 459, col: 28, offset: 12078},
													name: "NUMBER",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 459, col: 38, offset: 12088},
									name: "RBRACE",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttName",
			pos:  position{line: 463, col: 1, offset: 12139},
			expr: &choiceExpr{
				pos: position{line: 464, col: 5, offset: 12237},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 464, col: 5, offset: 12237},
						run: (*parser).callonAttName2,
						expr: &ruleRefExpr{
							pos:  position{line: 464, col: 5, offset: 12237},
							name: "ATTR_CHARS",
						},
					},
					&actionExpr{
						pos: position{line: 467, col: 7, offset: 12297},
						run: (*parser).callonAttName4,
						expr: &ruleRefExpr{
							pos:  position{line: 467, col: 7, offset: 12297},
							name: "ASCII_LETTERS",
						},
					},
				},
			},
		},
		{
			name: "RawString",
			pos:  position{line: 475, col: 1, offset: 12445},
			expr: &choiceExpr{
				pos: position{line: 476, col: 5, offset: 12462},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 476, col: 5, offset: 12462},
						run: (*parser).callonRawString2,
						expr: &seqExpr{
							pos: position{line: 476, col: 5, offset: 12462},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 476, col: 5, offset: 12462},
									name: "QUOT",
								},
								&labeledExpr{
									pos:   position{line: 476, col: 10, offset: 12467},
									label: "ss",
									expr: &ruleRefExpr{
										pos:  position{line: 476, col: 13, offset: 12470},
										name: "SimpleString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 476, col: 26, offset: 12483},
									name: "QUOT",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 484, col: 8, offset: 12695},
						run: (*parser).callonRawString8,
						expr: &seqExpr{
							pos: position{line: 484, col: 8, offset: 12695},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 484, col: 8, offset: 12695},
									name: "QUOT",
								},
								&ruleRefExpr{
									pos:  position{line: 484, col: 13, offset: 12700},
									name: "QUOT",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleString",
			pos:  position{line: 488, col: 1, offset: 12796},
			expr: &actionExpr{
				pos: position{line: 489, col: 5, offset: 12816},
				run: (*parser).callonSimpleString1,
				expr: &labeledExpr{
					pos:   position{line: 489, col: 5, offset: 12816},
					label: "values",
					expr: &oneOrMoreExpr{
						pos: position{line: 489, col: 12, offset: 12823},
						expr: &choiceExpr{
							pos: position{line: 489, col: 13, offset: 12824},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 489, col: 13, offset: 12824},
									name: "AnyLetter",
								},
								&ruleRefExpr{
									pos:  position{line: 489, col: 25, offset: 12836},
									name: "NO_RG_ESCAPED",
								},
								&ruleRefExpr{
									pos:  position{line: 489, col: 41, offset: 12852},
									name: "NO_RG_SPEC",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NO_RG_SPEC",
			pos:  position{line: 501, col: 1, offset: 13188},
			expr: &choiceExpr{
				pos: position{line: 502, col: 5, offset: 13206},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 502, col: 5, offset: 13206},
						val:        "\\{",
						ignoreCase: false,
						want:       "\"\\\\{\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 13, offset: 13214},
						val:        "\\}",
						ignoreCase: false,
						want:       "\"\\\\}\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 21, offset: 13222},
						val:        "\\(",
						ignoreCase: false,
						want:       "\"\\\\(\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 29, offset: 13230},
						val:        "\\)",
						ignoreCase: false,
						want:       "\"\\\\)\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 37, offset: 13238},
						val:        "\\[",
						ignoreCase: false,
						want:       "\"\\\\[\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 45, offset: 13246},
						val:        "\\]",
						ignoreCase: false,
						want:       "\"\\\\]\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 53, offset: 13254},
						val:        "\\?",
						ignoreCase: false,
						want:       "\"\\\\?\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 61, offset: 13262},
						val:        "\\!",
						ignoreCase: false,
						want:       "\"\\\\!\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 69, offset: 13270},
						val:        "\\.",
						ignoreCase: false,
						want:       "\"\\\\.\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 77, offset: 13278},
						val:        "\\*",
						ignoreCase: false,
						want:       "\"\\\\*\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 85, offset: 13286},
						val:        "\\+",
						ignoreCase: false,
						want:       "\"\\\\+\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 93, offset: 13294},
						val:        "\\^",
						ignoreCase: false,
						want:       "\"\\\\^\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 101, offset: 13302},
						val:        "\\$",
						ignoreCase: false,
						want:       "\"\\\\$\"",
					},
					&litMatcher{
						pos:        position{line: 502, col: 109, offset: 13310},
						val:        "\\|",
						ignoreCase: false,
						want:       "\"\\\\|\"",
					},
				},
			},
		},
		{
			name: "NO_RG_ESCAPED",
			pos:  position{line: 504, col: 1, offset: 13317},
			expr: &choiceExpr{
				pos: position{line: 505, col: 5, offset: 13338},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 505, col: 5, offset: 13338},
						val:        "\\\"",
						ignoreCase: false,
						want:       "\"\\\\\\\"\"",
					},
					&litMatcher{
						pos:        position{line: 505, col: 14, offset: 13347},
						val:        "\\\\",
						ignoreCase: false,
						want:       "\"\\\\\\\\\"",
					},
				},
			},
		},
		{
			name: "RegExp",
			pos:  position{line: 510, col: 1, offset: 13431},
			expr: &choiceExpr{
				pos: position{line: 511, col: 5, offset: 13445},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 511, col: 5, offset: 13445},
						run: (*parser).callonRegExp2,
						expr: &seqExpr{
							pos: position{line: 511, col: 5, offset: 13445},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 511, col: 5, offset: 13445},
									name: "QUOT",
								},
								&labeledExpr{
									pos:   position{line: 511, col: 10, offset: 13450},
									label: "rer",
									expr: &ruleRefExpr{
										pos:  position{line: 511, col: 14, offset: 13454},
										name: "RegExpRaw",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 511, col: 24, offset: 13464},
									name: "QUOT",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 519, col: 7, offset: 13651},
						run: (*parser).callonRegExp8,
						expr: &seqExpr{
							pos: position{line: 519, col: 7, offset: 13651},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 519, col: 7, offset: 13651},
									name: "QUOT",
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 12, offset: 13656},
									name: "QUOT",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegExpRaw",
			pos:  position{line: 530, col: 1, offset: 13827},
			expr: &actionExpr{
				pos: position{line: 531, col: 5, offset: 13844},
				run: (*parser).callonRegExpRaw1,
				expr: &labeledExpr{
					pos:   position{line: 531, col: 5, offset: 13844},
					label: "v",
					expr: &oneOrMoreExpr{
						pos: position{line: 531, col: 7, offset: 13846},
						expr: &choiceExpr{
							pos: position{line: 531, col: 8, offset: 13847},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 531, col: 8, offset: 13847},
									name: "RgLook",
								},
								&ruleRefExpr{
									pos:  position{line: 531, col: 17, offset: 13856},
									name: "RgGrouped",
								},
								&ruleRefExpr{
									pos:  position{line: 531, col: 29, offset: 13868},
									name: "RgSimple",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RgGrouped",
			pos:  position{line: 544, col: 1, offset: 14208},
			expr: &actionExpr{
				pos: position{line: 545, col: 5, offset: 14225},
				run: (*parser).callonRgGrouped1,
				expr: &seqExpr{
					pos: position{line: 545, col: 5, offset: 14225},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 545, col: 5, offset: 14225},
							name: "LPAREN",
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 12, offset: 14232},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 14, offset: 14234},
							label: "rg",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 17, offset: 14237},
								name: "RegExpRaw",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 27, offset: 14247},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 29, offset: 14249},
							name: "RPAREN",
						},
					},
				},
			},
		},
		{
			name: "RgSimple",
			pos:  position{line: 554, col: 1, offset: 14432},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 14448},
				run: (*parser).callonRgSimple1,
				expr: &labeledExpr{
					pos:   position{line: 555, col: 5, offset: 14448},
					label: "v",
					expr: &oneOrMoreExpr{
						pos: position{line: 555, col: 7, offset: 14450},
						expr: &choiceExpr{
							pos: position{line: 555, col: 8, offset: 14451},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 555, col: 8, offset: 14451},
									name: "RgRange",
								},
								&ruleRefExpr{
									pos:  position{line: 555, col: 18, offset: 14461},
									name: "RgChar",
								},
								&ruleRefExpr{
									pos:  position{line: 555, col: 27, offset: 14470},
									name: "RgAlt",
								},
								&ruleRefExpr{
									pos:  position{line: 555, col: 35, offset: 14478},
									name: "RgPosixClass",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RgPosixClass",
			pos:  position{line: 568, col: 1, offset: 14819},
			expr: &actionExpr{
				pos: position{line: 569, col: 5, offset: 14839},
				run: (*parser).callonRgPosixClass1,
				expr: &seqExpr{
					pos: position{line: 569, col: 5, offset: 14839},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 569, col: 5, offset: 14839},
							name: "LBRACKET",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 14, offset: 14848},
							name: "LBRACKET",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 23, offset: 14857},
							name: "COLON",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 29, offset: 14863},
							name: "POSIX_CHAR_CLS",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 44, offset: 14878},
							name: "COLON",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 50, offset: 14884},
							name: "RBRACKET",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 59, offset: 14893},
							name: "RBRACKET",
						},
					},
				},
			},
		},
		{
			name: "RgLook",
			pos:  position{line: 575, col: 1, offset: 15049},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 15063},
				run: (*parser).callonRgLook1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 15063},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 576, col: 5, offset: 15063},
							name: "LPAREN",
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 12, offset: 15070},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 14, offset: 15072},
							name: "RgLookOperator",
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 29, offset: 15087},
							name: "RegExpRaw",
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 39, offset: 15097},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 41, offset: 15099},
							name: "RPAREN",
						},
					},
				},
			},
		},
		{
			name: "RgLookOperator",
			pos:  position{line: 584, col: 1, offset: 15242},
			expr: &choiceExpr{
				pos: position{line: 585, col: 5, offset: 15264},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 585, col: 5, offset: 15264},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 585, col: 5, offset: 15264},
								name: "QUEST",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 11, offset: 15270},
								name: "LSTRUCT",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 19, offset: 15278},
								name: "NOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 585, col: 25, offset: 15284},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 585, col: 25, offset: 15284},
								name: "QUEST",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 31, offset: 15290},
								name: "LSTRUCT",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 39, offset: 15298},
								name: "EQ",
							},
						},
					},
					&seqExpr{
						pos: position{line: 585, col: 44, offset: 15303},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 585, col: 44, offset: 15303},
								name: "QUEST",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 50, offset: 15309},
								name: "NOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 585, col: 56, offset: 15315},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 585, col: 56, offset: 15315},
								name: "QUEST",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 62, offset: 15321},
								name: "EQ",
							},
						},
					},
				},
			},
		},
		{
			name: "RgAlt",
			pos:  position{line: 588, col: 1, offset: 15326},
			expr: &actionExpr{
				pos: position{line: 589, col: 5, offset: 15339},
				run: (*parser).callonRgAlt1,
				expr: &seqExpr{
					pos: position{line: 589, col: 5, offset: 15339},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 589, col: 5, offset: 15339},
							name: "LBRACKET",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 14, offset: 15348},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 589, col: 16, offset: 15350},
								expr: &ruleRefExpr{
									pos:  position{line: 589, col: 16, offset: 15350},
									name: "RgAltVal",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 589, col: 26, offset: 15360},
							name: "RBRACKET",
						},
					},
				},
			},
		},
		{
			name: "RgAltVal",
			pos:  position{line: 602, col: 1, offset: 15717},
			expr: &choiceExpr{
				pos: position{line: 602, col: 13, offset: 15729},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 602, col: 13, offset: 15729},
						run: (*parser).callonRgAltVal2,
						expr: &labeledExpr{
							pos:   position{line: 602, col: 13, offset: 15729},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 15, offset: 15731},
								name: "RgChar",
							},
						},
					},
					&actionExpr{
						pos: position{line: 611, col: 7, offset: 15919},
						run: (*parser).callonRgAltVal5,
						expr: &labeledExpr{
							pos:   position{line: 611, col: 7, offset: 15919},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 9, offset: 15921},
								name: "DASH",
							},
						},
					},
				},
			},
		},
		{
			name: "RgChar",
			pos:  position{line: 622, col: 1, offset: 16101},
			expr: &choiceExpr{
				pos: position{line: 623, col: 5, offset: 16115},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 623, col: 5, offset: 16115},
						run: (*parser).callonRgChar2,
						expr: &labeledExpr{
							pos:   position{line: 623, col: 5, offset: 16115},
							label: "rg",
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 8, offset: 16118},
								name: "RG_ESCAPED",
							},
						},
					},
					&actionExpr{
						pos: position{line: 633, col: 7, offset: 16360},
						run: (*parser).callonRgChar5,
						expr: &labeledExpr{
							pos:   position{line: 633, col: 7, offset: 16360},
							label: "rg",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 10, offset: 16363},
								name: "AnyLetter",
							},
						},
					},
					&actionExpr{
						pos: position{line: 643, col: 7, offset: 16604},
						run: (*parser).callonRgChar8,
						expr: &labeledExpr{
							pos:   position{line: 643, col: 7, offset: 16604},
							label: "rg",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 10, offset: 16607},
								name: "RG_OP",
							},
						},
					},
					&actionExpr{
						pos: position{line: 653, col: 7, offset: 16843},
						run: (*parser).callonRgChar11,
						expr: &labeledExpr{
							pos:   position{line: 653, col: 7, offset: 16843},
							label: "rg",
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 10, offset: 16846},
								name: "RG_NON_LETTER",
							},
						},
					},
					&actionExpr{
						pos: position{line: 663, col: 7, offset: 17091},
						run: (*parser).callonRgChar14,
						expr: &labeledExpr{
							pos:   position{line: 663, col: 7, offset: 17091},
							label: "rg",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 10, offset: 17094},
								name: "RG_NON_SPEC",
							},
						},
					},
					&actionExpr{
						pos: position{line: 673, col: 7, offset: 17337},
						run: (*parser).callonRgChar17,
						expr: &labeledExpr{
							pos:   position{line: 673, col: 7, offset: 17337},
							label: "rg",
							expr: &ruleRefExpr{
								pos:  position{line: 673, col: 10, offset: 17340},
								name: "RG_AMP",
							},
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 7, offset: 17578},
						run: (*parser).callonRgChar20,
						expr: &labeledExpr{
							pos:   position{line: 683, col: 7, offset: 17578},
							label: "rg",
							expr: &ruleRefExpr{
								pos:  position{line: 683, col: 10, offset: 17581},
								name: "RG_UNICODE_PROP",
							},
						},
					},
				},
			},
		},
		{
			name: "RG_OP",
			pos:  position{line: 694, col: 1, offset: 17823},
			expr: &choiceExpr{
				pos: position{line: 695, col: 5, offset: 17836},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 695, col: 5, offset: 17836},
						run: (*parser).callonRG_OP2,
						expr: &labeledExpr{
							pos:   position{line: 695, col: 5, offset: 17836},
							label: "v",
							expr: &charClassMatcher{
								pos:        position{line: 695, col: 7, offset: 17838},
								val:        "[-,_^$ ]",
								chars:      []rune{'-', ',', '_', '^', '$', ' '},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&actionExpr{
						pos: position{line: 703, col: 7, offset: 18005},
						run: (*parser).callonRG_OP5,
						expr: &labeledExpr{
							pos:   position{line: 703, col: 7, offset: 18005},
							label: "v",
							expr: &charClassMatcher{
								pos:        position{line: 703, col: 9, offset: 18007},
								val:        "[0-9?*+.|]",
								chars:      []rune{'?', '*', '+', '.', '|'},
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "RG_ESCAPED",
			pos:  position{line: 712, col: 1, offset: 18171},
			expr: &choiceExpr{
				pos: position{line: 713, col: 5, offset: 18189},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 713, col: 5, offset: 18189},
						val:        "\\{",
						ignoreCase: false,
						want:       "\"\\\\{\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 13, offset: 18197},
						val:        "\\}",
						ignoreCase: false,
						want:       "\"\\\\}\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 21, offset: 18205},
						val:        "\\(",
						ignoreCase: false,
						want:       "\"\\\\(\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 29, offset: 18213},
						val:        "\\)",
						ignoreCase: false,
						want:       "\"\\\\)\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 37, offset: 18221},
						val:        "\\[",
						ignoreCase: false,
						want:       "\"\\\\[\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 45, offset: 18229},
						val:        "\\]",
						ignoreCase: false,
						want:       "\"\\\\]\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 53, offset: 18237},
						val:        "\\?",
						ignoreCase: false,
						want:       "\"\\\\?\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 61, offset: 18245},
						val:        "\\!",
						ignoreCase: false,
						want:       "\"\\\\!\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 69, offset: 18253},
						val:        "\\.",
						ignoreCase: false,
						want:       "\"\\\\.\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 77, offset: 18261},
						val:        "\\\"",
						ignoreCase: false,
						want:       "\"\\\\\\\"\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 86, offset: 18270},
						val:        "\\*",
						ignoreCase: false,
						want:       "\"\\\\*\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 94, offset: 18278},
						val:        "\\+",
						ignoreCase: false,
						want:       "\"\\\\+\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 102, offset: 18286},
						val:        "\\^",
						ignoreCase: false,
						want:       "\"\\\\^\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 110, offset: 18294},
						val:        "\\$",
						ignoreCase: false,
						want:       "\"\\\\$\"",
					},
					&litMatcher{
						pos:        position{line: 713, col: 118, offset: 18302},
						val:        "\\|",
						ignoreCase: false,
						want:       "\"\\\\|\"",
					},
				},
			},
		},
		{
			name: "RG_UNICODE_PROP",
			pos:  position{line: 715, col: 1, offset: 18309},
			expr: &choiceExpr{
				pos: position{line: 716, col: 5, offset: 18332},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 716, col: 5, offset: 18332},
						val:        "\\p{L}",
						ignoreCase: false,
						want:       "\"\\\\p{L}\"",
					},
					&litMatcher{
						pos:        position{line: 716, col: 16, offset: 18343},
						val:        "\\p{Ll}",
						ignoreCase: false,
						want:       "\"\\\\p{Ll}\"",
					},
					&litMatcher{
						pos:        position{line: 716, col: 28, offset: 18355},
						val:        "\\p{Lu}",
						ignoreCase: false,
						want:       "\"\\\\p{Lu}\"",
					},
					&litMatcher{
						pos:        position{line: 716, col: 40, offset: 18367},
						val:        "\\p{Lt}",
						ignoreCase: false,
						want:       "\"\\\\p{Lt}\"",
					},
					&litMatcher{
						pos:        position{line: 716, col: 52, offset: 18379},
						val:        "\\p{L&}",
						ignoreCase: false,
						want:       "\"\\\\p{L&}\"",
					},
					&litMatcher{
						pos:        position{line: 716, col: 64, offset: 18391},
						val:        "\\p{Lm}",
						ignoreCase: false,
						want:       "\"\\\\p{Lm}\"",
					},
					&litMatcher{
						pos:        position{line: 716, col: 76, offset: 18403},
						val:        "\\p{Lo}",
						ignoreCase: false,
						want:       "\"\\\\p{Lo}\"",
					},
					&litMatcher{
						pos:        position{line: 717, col: 5, offset: 18419},
						val:        "\\p{M}",
						ignoreCase: false,
						want:       "\"\\\\p{M}\"",
					},
					&litMatcher{
						pos:        position{line: 717, col: 16, offset: 18430},
						val:        "\\p{Mn}",
						ignoreCase: false,
						want:       "\"\\\\p{Mn}\"",
					},
					&litMatcher{
						pos:        position{line: 717, col: 28, offset: 18442},
						val:        "\\p{Mc}",
						ignoreCase: false,
						want:       "\"\\\\p{Mc}\"",
					},
					&litMatcher{
						pos:        position{line: 717, col: 40, offset: 18454},
						val:        "\\p{Me}",
						ignoreCase: false,
						want:       "\"\\\\p{Me}\"",
					},
					&litMatcher{
						pos:        position{line: 718, col: 5, offset: 18470},
						val:        "\\p{Z}",
						ignoreCase: false,
						want:       "\"\\\\p{Z}\"",
					},
					&litMatcher{
						pos:        position{line: 718, col: 16, offset: 18481},
						val:        "\\p{Zs}",
						ignoreCase: false,
						want:       "\"\\\\p{Zs}\"",
					},
					&litMatcher{
						pos:        position{line: 718, col: 28, offset: 18493},
						val:        "\\p{Zl}",
						ignoreCase: false,
						want:       "\"\\\\p{Zl}\"",
					},
					&litMatcher{
						pos:        position{line: 718, col: 40, offset: 18505},
						val:        "\\p{Zp}",
						ignoreCase: false,
						want:       "\"\\\\p{Zp}\"",
					},
					&litMatcher{
						pos:        position{line: 719, col: 5, offset: 18521},
						val:        "\\p{S}",
						ignoreCase: false,
						want:       "\"\\\\p{S}\"",
					},
					&litMatcher{
						pos:        position{line: 719, col: 16, offset: 18532},
						val:        "\\p{Sm}",
						ignoreCase: false,
						want:       "\"\\\\p{Sm}\"",
					},
					&litMatcher{
						pos:        position{line: 719, col: 28, offset: 18544},
						val:        "\\p{Sc}",
						ignoreCase: false,
						want:       "\"\\\\p{Sc}\"",
					},
					&litMatcher{
						pos:        position{line: 719, col: 40, offset: 18556},
						val:        "\\p{Sk}",
						ignoreCase: false,
						want:       "\"\\\\p{Sk}\"",
					},
					&litMatcher{
						pos:        position{line: 719, col: 52, offset: 18568},
						val:        "\\p{So}",
						ignoreCase: false,
						want:       "\"\\\\p{So}\"",
					},
					&litMatcher{
						pos:        position{line: 720, col: 5, offset: 18584},
						val:        "\\p{N}",
						ignoreCase: false,
						want:       "\"\\\\p{N}\"",
					},
					&litMatcher{
						pos:        position{line: 720, col: 16, offset: 18595},
						val:        "\\p{Nd}",
						ignoreCase: false,
						want:       "\"\\\\p{Nd}\"",
					},
					&litMatcher{
						pos:        position{line: 720, col: 28, offset: 18607},
						val:        "\\p{Nl}",
						ignoreCase: false,
						want:       "\"\\\\p{Nl}\"",
					},
					&litMatcher{
						pos:        position{line: 720, col: 40, offset: 18619},
						val:        "\\p{No}",
						ignoreCase: false,
						want:       "\"\\\\p{No}\"",
					},
					&litMatcher{
						pos:        position{line: 721, col: 5, offset: 18635},
						val:        "\\p{P}",
						ignoreCase: false,
						want:       "\"\\\\p{P}\"",
					},
					&litMatcher{
						pos:        position{line: 721, col: 16, offset: 18646},
						val:        "\\p{Pd}",
						ignoreCase: false,
						want:       "\"\\\\p{Pd}\"",
					},
					&litMatcher{
						pos:        position{line: 721, col: 28, offset: 18658},
						val:        "\\p{Ps}",
						ignoreCase: false,
						want:       "\"\\\\p{Ps}\"",
					},
					&litMatcher{
						pos:        position{line: 721, col: 40, offset: 18670},
						val:        "\\p{Pe}",
						ignoreCase: false,
						want:       "\"\\\\p{Pe}\"",
					},
					&litMatcher{
						pos:        position{line: 721, col: 52, offset: 18682},
						val:        "\\p{Pi}",
						ignoreCase: false,
						want:       "\"\\\\p{Pi}\"",
					},
					&litMatcher{
						pos:        position{line: 721, col: 64, offset: 18694},
						val:        "\\p{Pf}",
						ignoreCase: false,
						want:       "\"\\\\p{Pf}\"",
					},
					&litMatcher{
						pos:        position{line: 721, col: 76, offset: 18706},
						val:        "\\p{Pc}",
						ignoreCase: false,
						want:       "\"\\\\p{Pc}\"",
					},
					&litMatcher{
						pos:        position{line: 721, col: 88, offset: 18718},
						val:        "\\p{Po}",
						ignoreCase: false,
						want:       "\"\\\\p{Po}\"",
					},
					&litMatcher{
						pos:        position{line: 722, col: 5, offset: 18734},
						val:        "\\p{C}",
						ignoreCase: false,
						want:       "\"\\\\p{C}\"",
					},
					&litMatcher{
						pos:        position{line: 722, col: 16, offset: 18745},
						val:        "\\p{Cc}",
						ignoreCase: false,
						want:       "\"\\\\p{Cc}\"",
					},
					&litMatcher{
						pos:        position{line: 722, col: 28, offset: 18757},
						val:        "\\p{Cf}",
						ignoreCase: false,
						want:       "\"\\\\p{Cf}\"",
					},
					&litMatcher{
						pos:        position{line: 722, col: 40, offset: 18769},
						val:        "\\p{Co}",
						ignoreCase: false,
						want:       "\"\\\\p{Co}\"",
					},
					&litMatcher{
						pos:        position{line: 722, col: 52, offset: 18781},
						val:        "\\p{Cs}",
						ignoreCase: false,
						want:       "\"\\\\p{Cs}\"",
					},
					&litMatcher{
						pos:        position{line: 722, col: 64, offset: 18793},
						val:        "\\p{Cn}",
						ignoreCase: false,
						want:       "\"\\\\p{Cn}\"",
					},
				},
			},
		},
		{
			name: "POSIX_CHAR_CLS",
			pos:  position{line: 724, col: 1, offset: 18804},
			expr: &choiceExpr{
				pos: position{line: 725, col: 5, offset: 18826},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 725, col: 5, offset: 18826},
						val:        "alnum",
						ignoreCase: false,
						want:       "\"alnum\"",
					},
					&litMatcher{
						pos:        position{line: 725, col: 15, offset: 18836},
						val:        "alpha",
						ignoreCase: false,
						want:       "\"alpha\"",
					},
					&litMatcher{
						pos:        position{line: 725, col: 25, offset: 18846},
						val:        "digit",
						ignoreCase: false,
						want:       "\"digit\"",
					},
					&litMatcher{
						pos:        position{line: 725, col: 35, offset: 18856},
						val:        "lower",
						ignoreCase: false,
						want:       "\"lower\"",
					},
					&litMatcher{
						pos:        position{line: 725, col: 45, offset: 18866},
						val:        "upper",
						ignoreCase: false,
						want:       "\"upper\"",
					},
					&litMatcher{
						pos:        position{line: 725, col: 55, offset: 18876},
						val:        "punct",
						ignoreCase: false,
						want:       "\"punct\"",
					},
					&litMatcher{
						pos:        position{line: 725, col: 65, offset: 18886},
						val:        "xdigit",
						ignoreCase: false,
						want:       "\"xdigit\"",
					},
				},
			},
		},
		{
			name: "RgRange",
			pos:  position{line: 728, col: 1, offset: 18916},
			expr: &actionExpr{
				pos: position{line: 729, col: 5, offset: 18931},
				run: (*parser).callonRgRange1,
				expr: &seqExpr{
					pos: position{line: 729, col: 5, offset: 18931},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 729, col: 5, offset: 18931},
							name: "LBRACE",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 12, offset: 18938},
							label: "rg",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 15, offset: 18941},
								name: "RgRangeSpec",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 27, offset: 18953},
							name: "RBRACE",
						},
					},
				},
			},
		},
		{
			name: "RgRangeSpec",
			pos:  position{line: 738, col: 1, offset: 19139},
			expr: &choiceExpr{
				pos: position{line: 739, col: 5, offset: 19158},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 19158},
						run: (*parser).callonRgRangeSpec2,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 19158},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 739, col: 5, offset: 19158},
									label: "n1",
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 8, offset: 19161},
										name: "NUMBER",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 739, col: 15, offset: 19168},
									name: "COMMA",
								},
								&labeledExpr{
									pos:   position{line: 739, col: 21, offset: 19174},
									label: "n2",
									expr: &zeroOrOneExpr{
										pos: position{line: 739, col: 24, offset: 19177},
										expr: &ruleRefExpr{
											pos:  position{line: 739, col: 24, offset: 19177},
											name: "NUMBER",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 7, offset: 19356},
						run: (*parser).callonRgRangeSpec10,
						expr: &labeledExpr{
							pos:   position{line: 746, col: 7, offset: 19356},
							label: "n1",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 10, offset: 19359},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyLetter",
			pos:  position{line: 753, col: 1, offset: 19485},
			expr: &choiceExpr{
				pos: position{line: 754, col: 5, offset: 19502},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 754, col: 5, offset: 19502},
						run: (*parser).callonAnyLetter2,
						expr: &ruleRefExpr{
							pos:  position{line: 754, col: 5, offset: 19502},
							name: "LETTER",
						},
					},
					&actionExpr{
						pos: position{line: 757, col: 7, offset: 19558},
						run: (*parser).callonAnyLetter4,
						expr: &ruleRefExpr{
							pos:  position{line: 757, col: 7, offset: 19558},
							name: "LETTER_PHON",
						},
					},
				},
			},
		},
		{
			name: "PQType",
			pos:  position{line: 763, col: 1, offset: 19689},
			expr: &seqExpr{
				pos: position{line: 764, col: 5, offset: 19703},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 764, col: 5, offset: 19703},
						name: "LBRACE",
					},
					&ruleRefExpr{
						pos:  position{line: 764, col: 12, offset: 19710},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 764, col: 14, offset: 19712},
						name: "Query",
					},
					&ruleRefExpr{
						pos:  position{line: 764, col: 20, offset: 19718},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 764, col: 22, offset: 19720},
						name: "RBRACE",
					},
				},
			},
		},
		{
			name: "PQLimit",
			pos:  position{line: 766, col: 1, offset: 19728},
			expr: &choiceExpr{
				pos: position{line: 767, col: 5, offset: 19743},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 767, col: 5, offset: 19743},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 767, col: 5, offset: 19743},
								name: "NUMBER",
							},
							&ruleRefExpr{
								pos:  position{line: 767, col: 12, offset: 19750},
								name: "DOT",
							},
							&ruleRefExpr{
								pos:  position{line: 767, col: 16, offset: 19754},
								name: "NUMBER",
							},
						},
					},
					&seqExpr{
						pos: position{line: 767, col: 25, offset: 19763},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 767, col: 25, offset: 19763},
								name: "DOT",
							},
							&ruleRefExpr{
								pos:  position{line: 767, col: 29, offset: 19767},
								name: "NUMBER",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 767, col: 38, offset: 19776},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "PQAlways",
			pos:  position{line: 769, col: 1, offset: 19784},
			expr: &choiceExpr{
				pos: position{line: 770, col: 5, offset: 19800},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 770, col: 5, offset: 19800},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 770, col: 5, offset: 19800},
								name: "QUEST",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 11, offset: 19806},
								name: "LBRACE",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 18, offset: 19813},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 20, offset: 19815},
								name: "Query",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 26, offset: 19821},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 28, offset: 19823},
								name: "RBRACE",
							},
						},
					},
					&seqExpr{
						pos: position{line: 770, col: 37, offset: 19832},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 770, col: 37, offset: 19832},
								name: "QUEST",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 43, offset: 19838},
								name: "PQLimit",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 51, offset: 19846},
								name: "LBRACE",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 58, offset: 19853},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 60, offset: 19855},
								name: "Query",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 66, offset: 19861},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 770, col: 68, offset: 19863},
								name: "RBRACE",
							},
						},
					},
				},
			},
		},
		{
			name: "PQNever",
			pos:  position{line: 772, col: 1, offset: 19871},
			expr: &choiceExpr{
				pos: position{line: 773, col: 5, offset: 19886},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 773, col: 5, offset: 19886},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 773, col: 5, offset: 19886},
								name: "NOT",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 9, offset: 19890},
								name: "LBRACE",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 16, offset: 19897},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 18, offset: 19899},
								name: "Query",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 24, offset: 19905},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 26, offset: 19907},
								name: "RBRACE",
							},
						},
					},
					&seqExpr{
						pos: position{line: 773, col: 35, offset: 19916},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 773, col: 35, offset: 19916},
								name: "NOT",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 39, offset: 19920},
								name: "PQLimit",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 47, offset: 19928},
								name: "LBRACE",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 54, offset: 19935},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 56, offset: 19937},
								name: "Query",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 62, offset: 19943},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 773, col: 64, offset: 19945},
								name: "RBRACE",
							},
						},
					},
				},
			},
		},
		{
			name: "PQSet",
			pos:  position{line: 775, col: 1, offset: 19953},
			expr: &choiceExpr{
				pos: position{line: 776, col: 5, offset: 19966},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 776, col: 5, offset: 19966},
						name: "PQType",
					},
					&ruleRefExpr{
						pos:  position{line: 776, col: 14, offset: 19975},
						name: "PQAlways",
					},
					&ruleRefExpr{
						pos:  position{line: 776, col: 25, offset: 19986},
						name: "PQNever",
					},
				},
			},
		},
		{
			name: "PQuery",
			pos:  position{line: 778, col: 1, offset: 19995},
			expr: &seqExpr{
				pos: position{line: 779, col: 5, offset: 20009},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 779, col: 5, offset: 20009},
						name: "PQSet",
					},
					&zeroOrMoreExpr{
						pos: position{line: 779, col: 11, offset: 20015},
						expr: &seqExpr{
							pos: position{line: 779, col: 12, offset: 20016},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 779, col: 12, offset: 20016},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 779, col: 14, offset: 20018},
									name: "BINAND",
								},
								&ruleRefExpr{
									pos:  position{line: 779, col: 21, offset: 20025},
									name: "BINAND",
								},
								&ruleRefExpr{
									pos:  position{line: 779, col: 28, offset: 20032},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 779, col: 30, offset: 20034},
									name: "PQSet",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RG_NON_LETTER",
			pos:  position{line: 784, col: 1, offset: 20119},
			expr: &litMatcher{
				pos:        position{line: 784, col: 18, offset: 20136},
				val:        "'",
				ignoreCase: false,
				want:       "\"'\"",
			},
		},
		{
			name: "RG_NON_SPEC",
			pos:  position{line: 785, col: 1, offset: 20140},
			expr: &charClassMatcher{
				pos:        position{line: 785, col: 16, offset: 20155},
				val:        "[#%§]",
				chars:      []rune{'#', '%', '§'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "RG_AMP",
			pos:  position{line: 786, col: 1, offset: 20162},
			expr: &litMatcher{
				pos:        position{line: 786, col: 11, offset: 20172},
				val:        "&",
				ignoreCase: false,
				want:       "\"&\"",
			},
		},
		{
			name: "LETTER_PHON",
			pos:  position{line: 788, col: 1, offset: 20177},
			expr: &charClassMatcher{
				pos:        position{line: 789, col: 5, offset: 20196},
				val:        "[\\u2019\\u00a8\\u0259\\u1d4a\\u0148\\u1d9c\\u0161\\u02b0\\u010d\\u1d49\\u0159\\u2071\\u017e\\u1d52\\u00fd\\u1d58\\u00e1\\u0065\\u00ed\\u006f\\u00e9\\u0075\\u00e4\\u1e01\\u0142\\u0141\\u0065\\u0045\\u0072\\u0052\\u0155\\u0154\\u0074\\u0054\\u0165\\u0164\\u0079\\u0059\\u0075\\u0055\\u0069\\u0049\\u006f\\u004f\\u0070\\u0050\\u00fa\\u00f3\\u013a\\u0139\\u2019\\u00a8\\u0259\\u1d4a\\u0148\\u1d9c\\u0161\\u02b0\\u010d\\u1d49\\u0159\\u2071\\u017e\\u1d52\\u00fd\\u1d58\\u00e1\\u0065\\u00ed\\u006f\\u00e9\\u0075\\u00e4\\u1e01\\u0142\\u0141\\u0065\\u0045\\u0072\\u0052\\u0155\\u0154\\u0074\\u0054\\u0165\\u0164\\u0079\\u0059\\u0075\\u0055\\u0069\\u0049\\u006f\\u004f\\u0070\\u0050\\u00fa\\u00f3\\u013a\\u0139\\u2019\\u00a8\\u0259\\u1d4a\\u0148\\u1d9c\\u0161\\u02b0\\u010d\\u1d49\\u0159\\u2071\\u017e\\u1d52\\u00fd\\u1d58\\u00e1\\u0065\\u00ed\\u006f\\u00e9\\u0075\\u00e4\\u1e01\\u0142\\u0141\\u0065\\u0045\\u0072\\u0052\\u0155\\u0154\\u0074\\u0054\\u0165\\u0164\\u0079\\u0059\\u0075\\u0055\\u0069\\u0049\\u006f\\u004f\\u0070\\u0050\\u00fa\\u00f3\\u013a\\u0139\\u013e\\u013d\\u0061\\u0041\\u0073\\u0053\\u015b\\u015a\\u0064\\u0044\\u010f\\u010e\\u0066\\u0046\\u0067\\u0047\\u0068\\u0048\\u006a\\u004a\\u006b\\u004b\\u006c\\u004c]",
				chars:      []rune{'’', '¨', 'ə', 'ᵊ', 'ň', 'ᶜ', 'š', 'ʰ', 'č', 'ᵉ', 'ř', 'ⁱ', 'ž', 'ᵒ', 'ý', 'ᵘ', 'á', 'e', 'í', 'o', 'é', 'u', 'ä', 'ḁ', 'ł', 'Ł', 'e', 'E', 'r', 'R', 'ŕ', 'Ŕ', 't', 'T', 'ť', 'Ť', 'y', 'Y', 'u', 'U', 'i', 'I', 'o', 'O', 'p', 'P', 'ú', 'ó', 'ĺ', 'Ĺ', '’', '¨', 'ə', 'ᵊ', 'ň', 'ᶜ', 'š', 'ʰ', 'č', 'ᵉ', 'ř', 'ⁱ', 'ž', 'ᵒ', 'ý', 'ᵘ', 'á', 'e', 'í', 'o', 'é', 'u', 'ä', 'ḁ', 'ł', 'Ł', 'e', 'E', 'r', 'R', 'ŕ', 'Ŕ', 't', 'T', 'ť', 'Ť', 'y', 'Y', 'u', 'U', 'i', 'I', 'o', 'O', 'p', 'P', 'ú', 'ó', 'ĺ', 'Ĺ', '’', '¨', 'ə', 'ᵊ', 'ň', 'ᶜ', 'š', 'ʰ', 'č', 'ᵉ', 'ř', 'ⁱ', 'ž', 'ᵒ', 'ý', 'ᵘ', 'á', 'e', 'í', 'o', 'é', 'u', 'ä', 'ḁ', 'ł', 'Ł', 'e', 'E', 'r', 'R', 'ŕ', 'Ŕ', 't', 'T', 'ť', 'Ť', 'y', 'Y', 'u', 'U', 'i', 'I', 'o', 'O', 'p', 'P', 'ú', 'ó', 'ĺ', 'Ĺ', 'ľ', 'Ľ', 'a', 'A', 's', 'S', 'ś', 'Ś', 'd', 'D', 'ď', 'Ď', 'f', 'F', 'g', 'G', 'h', 'H', 'j', 'J', 'k', 'K', 'l', 'L'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "LETTER",
			pos:  position{line: 791, col: 1, offset: 21244},
			expr: &charClassMatcher{
				pos:        position{line: 792, col: 5, offset: 21258},
				val:        "[A-Za-z\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0345\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05B0-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0657\\u0659-\\u065F\\u066E-\\u06D3\\u06D5-\\u06DC\\u06E1-\\u06E8\\u06ED-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710-\\u073F\\u074D-\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0817\\u081A-\\u082C\\u0840-\\u0858\\u08A0-\\u08B4\\u08E3-\\u08E9\\u08F0-\\u093B\\u093D-\\u094C\\u094E-\\u0950\\u0955-\\u0963\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C4\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09F0\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A70-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0-\\u0AE3\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D-\\u0B44\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4C\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCC\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E46\\u0E4D\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ECD\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F81\\u0F88-\\u0F97\\u0F99-\\u0FBC\\u1000-\\u1036\\u1038\\u103B-\\u103F\\u1050-\\u1062\\u1065-\\u1068\\u106E-\\u1086\\u108E\\u109C\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1713\\u1720-\\u1733\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17B3\\u17B6-\\u17C8\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u1938\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A61-\\u1A74\\u1AA7\\u1B00-\\u1B33\\u1B35-\\u1B43\\u1B45-\\u1B4B\\u1B80-\\u1BA9\\u1BAC-\\u1BAF\\u1BBA-\\u1BE5\\u1BE7-\\u1BF1\\u1C00-\\u1C35\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1DE7-\\u1DF4\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2019\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u24B6-\\u24E9\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA674-\\uA67B\\uA67F-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA827\\uA840-\\uA873\\uA880-\\uA8C3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA92A\\uA930-\\uA952\\uA960-\\uA97C\\uA980-\\uA9B2\\uA9B4-\\uA9BF\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAABE\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\u
				chars:      []rune{'ª', 'µ', 'º', 'ˬ', 'ˮ', 'ͅ', 'Ͷ', 'ͷ', 'Ϳ', 'Ά', 'Ό', 'ՙ', 'ֿ', 'ׁ', 'ׂ', 'ׄ', 'ׅ', 'ׇ', 'ۿ', 'ߴ', 'ߵ', 'ߺ', 'এ', 'ঐ', 'ল', 'ে', 'ৈ', 'ো', 'ৌ', 'ৎ', 'ৗ', 'ড়', 'ঢ়', 'ৰ', 'ৱ', 'ਏ', 'ਐ', 'ਲ', 'ਲ਼', 'ਵ', 'ਸ਼', 'ਸ', 'ਹ', 'ੇ', 'ੈ', 'ੋ', 'ੌ', 'ੑ', 'ਫ਼', 'લ', 'ળ', 'ો', 'ૌ', 'ૐ', 'ૹ', 'ଏ', 'ଐ', 'ଲ', 'ଳ', 'େ', 'ୈ', 'ୋ', 'ୌ', 'ୖ', 'ୗ', 'ଡ଼', 'ଢ଼', 'ୱ', 'ஂ', 'ஃ', 'ங', 'ச', 'ஜ', 'ஞ', 'ட', 'ண', 'த', 'ௐ', 'ௗ', 'ౕ', 'ౖ', 'ೕ', 'ೖ', 'ೞ', 'ೱ', 'ೲ', 'ൎ', 'ൗ', 'ං', 'ඃ', 'ල', 'ූ', 'ෲ', 'ෳ', 'ํ', 'ກ', 'ຂ', 'ຄ', 'ງ', 'ຈ', 'ຊ', 'ຍ', 'ລ', 'ວ', 'ສ', 'ຫ', 'ໆ', 'ໍ', 'ༀ', 'း', 'ႎ', 'ႜ', 'ႝ', 'Ⴧ', 'Ⴭ', 'ቘ', 'ዀ', '፟', 'ᝲ', 'ᝳ', 'ៗ', 'ៜ', 'ᪧ', 'ᳵ', 'ᳶ', 'Ὑ', 'Ὓ', 'Ὕ', 'ι', '’', 'ⁱ', 'ⁿ', 'ℂ', 'ℇ', 'ℕ', 'ℤ', 'Ω', 'ℨ', 'ⅎ', 'Ⳳ', 'ⳳ', 'ⴧ', 'ⴭ', 'ⵯ', 'ⸯ', 'ꘪ', 'ꘫ', 'ꣻ', 'ꣽ', 'ꧏ', 'ꩺ', 'ꫀ', 'ꫂ', 'מּ', 'נּ', 'סּ', 'ףּ', 'פּ', '𐀼', '𐀽', '𐠈', '𐠷', '𐠸', '𐠼', '𐣴', '𐣵', '𐦾', '𐦿', '𐨅', '𐨆', '𑅶', '𑇚', '𑇜', '𑈷', '𑊈', '𑌏', '𑌐', '𑌲', '𑌳', '𑍇', '𑍈', '𑍋', '𑍌', '𑍐', '𑍗', '𑓄', '𑓅', '𑓇', '𑙀', '𑙄', '𑣿', '𛀀', '𛀁', '𛲞', '𝒞', '𝒟', '𝒢', '𝒥', '𝒦', '𝒻', '𝕆', '𞸡', '𞸢', '𞸤', '𞸧', '𞸹', '𞸻', '𞹂', '𞹇', '𞹉', '𞹋', '𞹑', '𞹒', '𞹔', '𞹗', '𞹙', '𞹛', '𞹝', '𞹟', '𞹡', '𞹢', '𞹤', '𞹾'},
				ranges:     []rune{'A', 'Z', 'a', 'z', 'À', 'Ö', 'Ø', 'ö', 'ø', 'ˁ', 'ˆ', 'ˑ', 'ˠ', 'ˤ', 'Ͱ', 'ʹ', 'ͺ', 'ͽ', 'Έ', 'Ί', 'Ύ', 'Ρ', 'Σ', 'ϵ', 'Ϸ', 'ҁ', 'Ҋ', 'ԯ', 'Ա', 'Ֆ', 'ա', 'և', 'ְ', 'ֽ', 'א', 'ת', 'װ', 'ײ', 'ؐ', 'ؚ', 'ؠ', 'ٗ', 'ٙ', 'ٟ', 'ٮ', 'ۓ', 'ە', 'ۜ', 'ۡ', 'ۨ', 'ۭ', 'ۯ', 'ۺ', 'ۼ', 'ܐ', 'ܿ', 'ݍ', 'ޱ', 'ߊ', 'ߪ', 'ࠀ', 'ࠗ', 'ࠚ', 'ࠬ', 'ࡀ', 'ࡘ', 'ࢠ', 'ࢴ', 'ࣣ', 'ࣩ', 'ࣰ', 'ऻ', 'ऽ', 'ौ', 'ॎ', 'ॐ', 'ॕ', 'ॣ', 'ॱ', 'ঃ', 'অ', 'ঌ', 'ও', 'ন', 'প', 'র', 'শ', 'হ', 'ঽ', 'ৄ', 'য়', 'ৣ', 'ਁ', 'ਃ', 'ਅ', 'ਊ', 'ਓ', 'ਨ', 'ਪ', 'ਰ', 'ਾ', 'ੂ', 'ਖ਼', 'ੜ', 'ੰ', 'ੵ', 'ઁ', 'ઃ', 'અ', 'ઍ', 'એ', 'ઑ', 'ઓ', 'ન', 'પ', 'ર', 'વ', 'હ', 'ઽ', 'ૅ', 'ે', 'ૉ', 'ૠ', 'ૣ', 'ଁ', 'ଃ', 'ଅ', 'ଌ', 'ଓ', 'ନ', 'ପ', 'ର', 'ଵ', 'ହ', 'ଽ', 'ୄ', 'ୟ', 'ୣ', 'அ', 'ஊ', 'எ', 'ஐ', 'ஒ', 'க', 'ந', 'ப', 'ம', 'ஹ', 'ா', 'ூ', 'ெ', 'ை', 'ொ', 'ௌ', 'ఀ', 'ః', 'అ', 'ఌ', 'ఎ', 'ఐ', 'ఒ', 'న', 'ప', 'హ', 'ఽ', 'ౄ', 'ె', 'ై', 'ొ', 'ౌ', 'ౘ', 'ౚ', 'ౠ', 'ౣ', 'ಁ', 'ಃ', 'ಅ', 'ಌ', 'ಎ', 'ಐ', 'ಒ', 'ನ', 'ಪ', 'ಳ', 'ವ', 'ಹ', 'ಽ', 'ೄ', 'ೆ', 'ೈ', 'ೊ', 'ೌ', 'ೠ', 'ೣ', 'ഁ', 'ഃ', 'അ', 'ഌ', 'എ', 'ഐ', 'ഒ', 'ഺ', 'ഽ', 'ൄ', 'െ', 'ൈ', 'ൊ', 'ൌ', 'ൟ', 'ൣ', 'ൺ', 'ൿ', 'අ', 'ඖ', 'ක', 'න', 'ඳ', 'ර', 'ව', 'ෆ', 'ා', 'ු', 'ෘ', 'ෟ', 'ก', 'ฺ', 'เ', 'ๆ', 'ດ', 'ທ', 'ນ', 'ຟ', 'ມ', 'ຣ', 'ອ', 'ູ', 'ົ', 'ຽ', 'ເ', 'ໄ', 'ໜ', 'ໟ', 'ཀ', 'ཇ', 'ཉ', 'ཬ', 'ཱ', 'ཱྀ', 'ྈ', 'ྗ', 'ྙ', 'ྼ', 'က', 'ံ', 'ျ', 'ဿ', 'ၐ', 'ၢ', 'ၥ', 'ၨ', 'ၮ', 'ႆ', 'Ⴀ', 'Ⴥ', 'ა', 'ჺ', 'ჼ', 'ቈ', 'ቊ', 'ቍ', 'ቐ', 'ቖ', 'ቚ', 'ቝ', 'በ', 'ኈ', 'ኊ', 'ኍ', 'ነ', 'ኰ', 'ኲ', 'ኵ', 'ኸ', 'ኾ', 'ዂ', 'ዅ', 'ወ', 'ዖ', 'ዘ', 'ጐ', 'ጒ', 'ጕ', 'ጘ', 'ፚ', 'ᎀ', 'ᎏ', 'Ꭰ', 'Ᏽ', 'ᏸ', 'ᏽ', 'ᐁ', 'ᙬ', 'ᙯ', 'ᙿ', 'ᚁ', 'ᚚ', 'ᚠ', 'ᛪ', 'ᛮ', 'ᛸ', 'ᜀ', 'ᜌ', 'ᜎ', 'ᜓ', 'ᜠ', 'ᜳ', 'ᝀ', 'ᝓ', 'ᝠ', 'ᝬ', 'ᝮ', 'ᝰ', 'ក', 'ឳ', 'ា', 'ៈ', 'ᠠ', 'ᡷ', 'ᢀ', 'ᢪ', 'ᢰ', 'ᣵ', 'ᤀ', 'ᤞ', 'ᤠ', 'ᤫ', 'ᤰ', 'ᤸ', 'ᥐ', 'ᥭ', 'ᥰ', 'ᥴ', 'ᦀ', 'ᦫ', 'ᦰ', 'ᧉ', 'ᨀ', 'ᨛ', 'ᨠ', 'ᩞ', 'ᩡ', 'ᩴ', 'ᬀ', 'ᬳ', 'ᬵ', 'ᭃ', 'ᭅ', 'ᭋ', 'ᮀ', 'ᮩ', 'ᮬ', 'ᮯ', 'ᮺ', 'ᯥ', 'ᯧ', 'ᯱ', 'ᰀ', 'ᰵ', 'ᱍ', 'ᱏ', 'ᱚ', 'ᱽ', 'ᳩ', 'ᳬ', 'ᳮ', 'ᳳ', 'ᴀ', 'ᶿ', 'ᷧ', 'ᷴ', 'Ḁ', 'ἕ', 'Ἐ', 'Ἕ', 'ἠ', 'ὅ', 'Ὀ', 'Ὅ', 'ὐ', 'ὗ', 'Ὗ', 'ώ', 'ᾀ', 'ᾴ', 'ᾶ', 'ᾼ', 'ῂ', 'ῄ', 'ῆ', 'ῌ', 'ῐ', 'ΐ', 'ῖ', 'Ί', 'ῠ', 'Ῥ', 'ῲ', 'ῴ', 'ῶ', 'ῼ', 'ₐ', 'ₜ', 'ℊ', 'ℓ', 'ℙ', 'ℝ', 'K', 'ℭ', 'ℯ', 'ℹ', 'ℼ', 'ℿ', 'ⅅ', 'ⅉ', 'Ⅰ', 'ↈ', 'Ⓐ', 'ⓩ', 'Ⰰ', 'Ⱞ', 'ⰰ', 'ⱞ', 'Ⱡ', 'ⳤ', 'Ⳬ', 'ⳮ', 'ⴀ', 'ⴥ', 'ⴰ', 'ⵧ', 'ⶀ', 'ⶖ', 'ⶠ', 'ⶦ', 'ⶨ', 'ⶮ', 'ⶰ', 'ⶶ', 'ⶸ', 'ⶾ', 'ⷀ', 'ⷆ', 'ⷈ', 'ⷎ', 'ⷐ', 'ⷖ', 'ⷘ', 'ⷞ', 'ⷠ', 'ⷿ', '々', '〇', '〡', '〩', '〱', '〵', '〸', '〼', 'ぁ', 'ゖ', 'ゝ', 'ゟ', 'ァ', 'ヺ', 'ー', 'ヿ', 'ㄅ', 'ㄭ', 'ㄱ', 'ㆎ', 'ㆠ', 'ㆺ', 'ㇰ', 'ㇿ', '㐀', '䶵', '一', '鿕', 'ꀀ', 'ꒌ', 'ꓐ', 'ꓽ', 'ꔀ', 'ꘌ', 'ꘐ', 'ꘟ', 'Ꙁ', 'ꙮ', 'ꙴ', 'ꙻ', 'ꙿ', 'ꛯ', 'ꜗ', 'ꜟ', 'Ꜣ', 'ꞈ', 'Ꞌ', 'Ɬ', 'Ʞ', 'ꞷ', 'ꟷ', 'ꠁ', 'ꠃ', 'ꠅ', 'ꠇ', 'ꠊ', 'ꠌ', 'ꠧ', 'ꡀ', 'ꡳ', 'ꢀ', 'ꣃ', 'ꣲ', 'ꣷ', 'ꤊ', 'ꤪ', 'ꤰ', 'ꥒ', 'ꥠ', 'ꥼ', 'ꦀ', 'ꦲ', 'ꦴ', 'ꦿ', 'ꧠ', 'ꧤ', 'ꧦ', 'ꧯ', 'ꧺ', 'ꧾ', 'ꨀ', 'ꨶ', 'ꩀ', 'ꩍ', 'ꩠ', 'ꩶ', 'ꩾ', 'ꪾ', 'ꫛ', 'ꫝ', 'ꫠ', 'ꫯ', 'ꫲ', 'ꫵ', 'ꬁ', 'ꬆ', 'ꬉ', 'ꬎ', 'ꬑ', 'ꬖ', 'ꬠ', 'ꬦ', 'ꬨ', 'ꬮ', 'ꬰ', 'ꭚ', 'ꭜ', 'ꭥ', 'ꭰ', 'ꯪ', '가', '힣', 'ힰ', 'ퟆ', 'ퟋ', 'ퟻ', '豈', '舘', '並', '龎', 'ﬀ', 'ﬆ', 'ﬓ', 'ﬗ', 'יִ', 'ﬨ', 'שׁ', 'זּ', 'טּ', 'לּ', 'צּ', 'ﮱ', 'ﯓ', 'ﴽ', 'ﵐ', 'ﶏ', 'ﶒ', 'ﷇ', 'ﷰ', 'ﷻ', 'ﹰ', 'ﹴ', 'ﹶ', 'ﻼ', 'Ａ', 'Ｚ', 'ａ', 'ｚ', 'ｦ', 'ﾾ', 'ￂ', 'ￇ', 'ￊ', 'ￏ', 'ￒ', 'ￗ', 'ￚ', 'ￜ', '𐀀', '𐀋', '𐀍', '𐀦', '𐀨', '𐀺', '𐀿', '𐁍', '𐁐', '𐁝', '𐂀', '𐃺', '𐅀', '𐅴', '𐊀', '𐊜', '𐊠', '𐋐', '𐌀', '𐌟', '𐌰', '𐍊', '𐍐', '𐍺', '𐎀', '𐎝', '𐎠', '𐏃', '𐏈', '𐏏', '𐏑', '𐏕', '𐐀', '𐒝', '𐔀', '𐔧', '𐔰', '𐕣', '𐘀', '𐜶', '𐝀', '𐝕', '𐝠', '𐝧', '𐠀', '𐠅', '𐠊', '𐠵', '𐠿', '𐡕', '𐡠', '𐡶', '𐢀', '𐢞', '𐣠', '𐣲', '𐤀', '𐤕', '𐤠', '𐤹', '𐦀', '𐦷', '𐨀', '𐨃', '𐨌', '𐨓', '𐨕', '𐨗', '𐨙', '𐨳', '𐩠', '𐩼', '𐪀', '𐪜', '𐫀', '𐫇', '𐫉', '𐫤', '𐬀', '𐬵', '𐭀', '𐭕', '𐭠', '𐭲', '𐮀', '𐮑', '𐰀', '𐱈', '𐲀', '𐲲', '𐳀', '𐳲', '𑀀', '𑁅', '𑂂', '𑂸', '𑃐', '𑃨', '𑄀', '𑄲', '𑅐', '𑅲', '𑆀', '𑆿', '𑇁', '𑇄', '𑈀', '𑈑', '𑈓', '𑈴', '𑊀', '𑊆', '𑊊', '𑊍', '𑊏', '𑊝', '𑊟', '𑊨', '𑊰', '𑋨', '𑌀', '𑌃', '𑌅', '𑌌', '𑌓', '𑌨', '𑌪', '𑌰', '𑌵', '𑌹', '𑌽', '𑍄', '𑍝', '𑍣', '𑒀', '𑓁', '𑖀', '𑖵', '𑖸', '𑖾', '𑗘', '𑗝', '𑘀', '𑘾', '𑚀', '𑚵', '𑜀', '𑜙', '𑜝', '𑜪', '𑢠', '𑣟', '𑫀', '𑫸', '𒀀', '𒎙', '𒐀', '𒑮', '𒒀', '𒕃', '𓀀', '𓐮', '𔐀', '𔙆', '𖠀', '𖨸', '𖩀', '𖩞', '𖫐', '𖫭', '𖬀', '𖬶', '𖭀', '𖭃', '𖭣', '𖭷', '𖭽', '𖮏', '𖼀', '𖽄', '𖽐', '𖽾', '𖾓', '𖾟', '𛰀', '𛱪', '𛱰', '𛱼', '𛲀', '𛲈', '𛲐', '𛲙', '𝐀', '𝑔', '𝑖', '𝒜', '𝒩', '𝒬', '𝒮', '𝒹', '𝒽', '𝓃', '𝓅', '𝔅', '𝔇', '𝔊', '𝔍', '𝔔', '𝔖', '𝔜', '𝔞', '𝔹', '𝔻', '𝔾', '𝕀', '𝕄', '𝕊', '𝕐', '𝕒', '𝚥', '𝚨', '𝛀', '𝛂', '𝛚', '𝛜', '𝛺', '𝛼', '𝜔', '𝜖', '𝜴', '𝜶', '𝝎', '𝝐', '𝝮', '𝝰', '𝞈', '𝞊', '𝞨', '𝞪', '𝟂', '𝟄', '𝟋', '𞠀', '𞣄', '𞸀', '𞸃', '𞸅', '𞸟', '𞸩', '𞸲', '𞸴', '𞸷', '𞹍', '𞹏', '𞹧', '𞹪', '𞹬', '𞹲', '𞹴', '𞹷', '𞹹', '𞹼', '𞺀', '𞺉', '𞺋', '𞺛', '𞺡', '𞺣', '𞺥', '𞺩', '𞺫', '𞺻', '🄰', '🅉', '🅐', '🅩', '🅰', '🆉', '𠀀', '𪛖', '𪜀', '𫜴', '𫝀', '𫠝', '𫠠', '𬺡', '丽', '𪘀'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 794, col: 1, offset: 29881},
			expr: &actionExpr{
				pos: position{line: 794, col: 11, offset: 29891},
				run: (*parser).callonNUMBER1,
				expr: &oneOrMoreExpr{
					pos: position{line: 794, col: 11, offset: 29891},
					expr: &charClassMatcher{
						pos:        position{line: 794, col: 11, offset: 29891},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "NNUMBER",
			pos:  position{line: 798, col: 1, offset: 29934},
			expr: &actionExpr{
				pos: position{line: 798, col: 12, offset: 29945},
				run: (*parser).callonNNUMBER1,
				expr: &seqExpr{
					pos: position{line: 798, col: 12, offset: 29945},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 798, col: 12, offset: 29945},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 798, col: 15, offset: 29948},
							expr: &charClassMatcher{
								pos:        position{line: 798, col: 15, offset: 29948},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ASCII_LETTERS",
			pos:  position{line: 802, col: 1, offset: 29991},
			expr: &actionExpr{
				pos: position{line: 802, col: 18, offset: 30008},
				run: (*parser).callonASCII_LETTERS1,
				expr: &oneOrMoreExpr{
					pos: position{line: 802, col: 18, offset: 30008},
					expr: &charClassMatcher{
						pos:        position{line: 802, col: 18, offset: 30008},
						val:        "[a-zA-Z]",
						ranges:     []rune{'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "ATTR_CHARS",
			pos:  position{line: 806, col: 1, offset: 30054},
			expr: &actionExpr{
				pos: position{line: 806, col: 15, offset: 30068},
				run: (*parser).callonATTR_CHARS1,
				expr: &seqExpr{
					pos: position{line: 806, col: 15, offset: 30068},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 806, col: 15, offset: 30068},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 806, col: 23, offset: 30076},
							expr: &charClassMatcher{
								pos:        position{line: 806, col: 23, offset: 30076},
								val:        "[a-zA-Z0-9@_]",
								chars:      []rune{'@', '_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "QUOT",
			pos:  position{line: 810, col: 1, offset: 30127},
			expr: &actionExpr{
				pos: position{line: 810, col: 9, offset: 30135},
				run: (*parser).callonQUOT1,
				expr: &litMatcher{
					pos:        position{line: 810, col: 9, offset: 30135},
					val:        "\"",
					ignoreCase: false,
					want:       "\"\\\"\"",
				},
			},
		},
		{
			name: "DASH",
			pos:  position{line: 811, col: 1, offset: 30171},
			expr: &actionExpr{
				pos: position{line: 811, col: 9, offset: 30179},
				run: (*parser).callonDASH1,
				expr: &litMatcher{
					pos:        position{line: 811, col: 9, offset: 30179},
					val:        "-",
					ignoreCase: false,
					want:       "\"-\"",
				},
			},
		},
		{
			name: "LPAREN",
			pos:  position{line: 812, col: 1, offset: 30214},
			expr: &actionExpr{
				pos: position{line: 812, col: 11, offset: 30224},
				run: (*parser).callonLPAREN1,
				expr: &litMatcher{
					pos:        position{line: 812, col: 11, offset: 30224},
					val:        "(",
					ignoreCase: false,
					want:       "\"(\"",
				},
			},
		},
		{
			name: "RPAREN",
			pos:  position{line: 813, col: 1, offset: 30259},
			expr: &actionExpr{
				pos: position{line: 813, col: 11, offset: 30269},
				run: (*parser).callonRPAREN1,
				expr: &litMatcher{
					pos:        position{line: 813, col: 11, offset: 30269},
					val:        ")",
					ignoreCase: false,
					want:       "\")\"",
				},
			},
		},
		{
			name: "LBRACKET",
			pos:  position{line: 814, col: 1, offset: 30304},
			expr: &actionExpr{
				pos: position{line: 814, col: 13, offset: 30316},
				run: (*parser).callonLBRACKET1,
				expr: &litMatcher{
					pos:        position{line: 814, col: 13, offset: 30316},
					val:        "[",
					ignoreCase: false,
					want:       "\"[\"",
				},
			},
		},
		{
			name: "RBRACKET",
			pos:  position{line: 815, col: 1, offset: 30351},
			expr: &actionExpr{
				pos: position{line: 815, col: 13, offset: 30363},
				run: (*parser).callonRBRACKET1,
				expr: &litMatcher{
					pos:        position{line: 815, col: 13, offset: 30363},
					val:        "]",
					ignoreCase: false,
					want:       "\"]\"",
				},
			},
		},
		{
			name: "LBRACE",
			pos:  position{line: 816, col: 1, offset: 30398},
			expr: &actionExpr{
				pos: position{line: 816, col: 11, offset: 30408},
				run: (*parser).callonLBRACE1,
				expr: &litMatcher{
					pos:        position{line: 816, col: 11, offset: 30408},
					val:        "{",
					ignoreCase: false,
					want:       "\"{\"",
				},
			},
		},
		{
			name: "RBRACE",
			pos:  position{line: 817, col: 1, offset: 30443},
			expr: &actionExpr{
				pos: position{line: 817, col: 11, offset: 30453},
				run: (*parser).callonRBRACE1,
				expr: &litMatcher{
					pos:        position{line: 817, col: 11, offset: 30453},
					val:        "}",
					ignoreCase: false,
					want:       "\"}\"",
				},
			},
		},
		{
			name: "STAR",
			pos:  position{line: 819, col: 1, offset: 30489},
			expr: &actionExpr{
				pos: position{line: 819, col: 9, offset: 30497},
				run: (*parser).callonSTAR1,
				expr: &litMatcher{
					pos:        position{line: 819, col: 9, offset: 30497},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "PLUS",
			pos:  position{line: 820, col: 1, offset: 30532},
			expr: &actionExpr{
				pos: position{line: 820, col: 9, offset: 30540},
				run: (*parser).callonPLUS1,
				expr: &litMatcher{
					pos:        position{line: 820, col: 9, offset: 30540},
					val:        "+",
					ignoreCase: false,
					want:       "\"+\"",
				},
			},
		},
		{
			name: "QUEST",
			pos:  position{line: 821, col: 1, offset: 30575},
			expr: &actionExpr{
				pos: position{line: 821, col: 10, offset: 30584},
				run: (*parser).callonQUEST1,
				expr: &litMatcher{
					pos:        position{line: 821, col: 10, offset: 30584},
					val:        "?",
					ignoreCase: false,
					want:       "\"?\"",
				},
			},
		},
		{
			name: "BINOR",
			pos:  position{line: 823, col: 1, offset: 30620},
			expr: &actionExpr{
				pos: position{line: 823, col: 10, offset: 30629},
				run: (*parser).callonBINOR1,
				expr: &litMatcher{
					pos:        position{line: 823, col: 10, offset: 30629},
					val:        "|",
					ignoreCase: false,
					want:       "\"|\"",
				},
			},
		},
		{
			name: "BINAND",
			pos:  position{line: 824, col: 1, offset: 30664},
			expr: &actionExpr{
				pos: position{line: 824, col: 11, offset: 30674},
				run: (*parser).callonBINAND1,
				expr: &litMatcher{
					pos:        position{line: 824, col: 11, offset: 30674},
					val:        "&",
					ignoreCase: false,
					want:       "\"&\"",
				},
			},
		},
		{
			name: "DOT",
			pos:  position{line: 825, col: 1, offset: 30709},
			expr: &actionExpr{
				pos: position{line: 825, col: 8, offset: 30716},
				run: (*parser).callonDOT1,
				expr: &litMatcher{
					pos:        position{line: 825, col: 8, offset: 30716},
					val:        ".",
					ignoreCase: false,
					want:       "\".\"",
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 826, col: 1, offset: 30751},
			expr: &actionExpr{
				pos: position{line: 826, col: 10, offset: 30760},
				run: (*parser).callonCOMMA1,
				expr: &litMatcher{
					pos:        position{line: 826, col: 10, offset: 30760},
					val:        ",",
					ignoreCase: false,
					want:       "\",\"",
				},
			},
		},
		{
			name: "SEMI",
			pos:  position{line: 827, col: 1, offset: 30795},
			expr: &actionExpr{
				pos: position{line: 827, col: 9, offset: 30803},
				run: (*parser).callonSEMI1,
				expr: &litMatcher{
					pos:        position{line: 827, col: 9, offset: 30803},
					val:        ";",
					ignoreCase: false,
					want:       "\";\"",
				},
			},
		},
		{
			name: "COLON",
			pos:  position{line: 828, col: 1, offset: 30838},
			expr: &actionExpr{
				pos: position{line: 828, col: 11, offset: 30848},
				run: (*parser).callonCOLON1,
				expr: &litMatcher{
					pos:        position{line: 828, col: 11, offset: 30848},
					val:        ":",
					ignoreCase: false,
					want:       "\":\"",
				},
			},
		},
		{
			name: "EEQ",
			pos:  position{line: 829, col: 1, offset: 30883},
			expr: &actionExpr{
				pos: position{line: 829, col: 8, offset: 30890},
				run: (*parser).callonEEQ1,
				expr: &litMatcher{
					pos:        position{line: 829, col: 8, offset: 30890},
					val:        "==",
					ignoreCase: false,
					want:       "\"==\"",
				},
			},
		},
		{
			name: "EQ",
			pos:  position{line: 830, col: 1, offset: 30926},
			expr: &actionExpr{
				pos: position{line: 830, col: 7, offset: 30932},
				run: (*parser).callonEQ1,
				expr: &litMatcher{
					pos:        position{line: 830, col: 7, offset: 30932},
					val:        "=",
					ignoreCase: false,
					want:       "\"=\"",
				},
			},
		},
		{
			name: "TEQ",
			pos:  position{line: 831, col: 1, offset: 30967},
			expr: &actionExpr{
				pos: position{line: 831, col: 8, offset: 30974},
				run: (*parser).callonTEQ1,
				expr: &litMatcher{
					pos:        position{line: 831, col: 8, offset: 30974},
					val:        "~",
					ignoreCase: false,
					want:       "\"~\"",
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 832, col: 1, offset: 31009},
			expr: &actionExpr{
				pos: position{line: 832, col: 8, offset: 31016},
				run: (*parser).callonNOT1,
				expr: &litMatcher{
					pos:        position{line: 832, col: 8, offset: 31016},
					val:        "!",
					ignoreCase: false,
					want:       "\"!\"",
				},
			},
		},
		{
			name: "LEQ",
			pos:  position{line: 833, col: 1, offset: 31051},
			expr: &actionExpr{
				pos: position{line: 833, col: 8, offset: 31058},
				run: (*parser).callonLEQ1,
				expr: &litMatcher{
					pos:        position{line: 833, col: 8, offset: 31058},
					val:        "<=",
					ignoreCase: false,
					want:       "\"<=\"",
				},
			},
		},
		{
			name: "GEQ",
			pos:  position{line: 834, col: 1, offset: 31094},
			expr: &actionExpr{
				pos: position{line: 834, col: 8, offset: 31101},
				run: (*parser).callonGEQ1,
				expr: &litMatcher{
					pos:        position{line: 834, col: 8, offset: 31101},
					val:        ">=",
					ignoreCase: false,
					want:       "\">=\"",
				},
			},
		},
		{
			name: "LSTRUCT",
			pos:  position{line: 835, col: 1, offset: 31137},
			expr: &actionExpr{
				pos: position{line: 835, col: 12, offset: 31148},
				run: (*parser).callonLSTRUCT1,
				expr: &litMatcher{
					pos:        position{line: 835, col: 12, offset: 31148},
					val:        "<",
					ignoreCase: false,
					want:       "\"<\"",
				},
			},
		},
		{
			name: "RSTRUCT",
			pos:  position{line: 836, col: 1, offset: 31183},
			expr: &actionExpr{
				pos: position{line: 836, col: 12, offset: 31194},
				run: (*parser).callonRSTRUCT1,
				expr: &litMatcher{
					pos:        position{line: 836, col: 12, offset: 31194},
					val:        ">",
					ignoreCase: false,
					want:       "\">\"",
				},
			},
		},
		{
			name: "SLASH",
			pos:  position{line: 837, col: 1, offset: 31229},
			expr: &actionExpr{
				pos: position{line: 837, col: 10, offset: 31238},
				run: (*parser).callonSLASH1,
				expr: &litMatcher{
					pos:        position{line: 837, col: 10, offset: 31238},
					val:        "/",
					ignoreCase: false,
					want:       "\"/\"",
				},
			},
		},
		{
			name: "POSNUM",
			pos:  position{line: 838, col: 1, offset: 31273},
			expr: &actionExpr{
				pos: position{line: 838, col: 11, offset: 31283},
				run: (*parser).callonPOSNUM1,
				expr: &litMatcher{
					pos:        position{line: 838, col: 11, offset: 31283},
					val:        "#",
					ignoreCase: false,
					want:       "\"#\"",
				},
			},
		},
		{
			name: "KW_MEET",
			pos:  position{line: 840, col: 1, offset: 31319},
			expr: &actionExpr{
				pos: position{line: 840, col: 12, offset: 31330},
				run: (*parser).callonKW_MEET1,
				expr: &litMatcher{
					pos:        position{line: 840, col: 12, offset: 31330},
					val:        "meet",
					ignoreCase: false,
					want:       "\"meet\"",
				},
			},
		},
		{
			name: "KW_UNION",
			pos:  position{line: 841, col: 1, offset: 31368},
			expr: &actionExpr{
				pos: position{line: 841, col: 13, offset: 31380},
				run: (*parser).callonKW_UNION1,
				expr: &litMatcher{
					pos:        position{line: 841, col: 13, offset: 31380},
					val:        "union",
					ignoreCase: false,
					want:       "\"union\"",
				},
			},
		},
		{
			name: "KW_WITHIN",
			pos:  position{line: 842, col: 1, offset: 31419},
			expr: &actionExpr{
				pos: position{line: 842, col: 14, offset: 31432},
				run: (*parser).callonKW_WITHIN1,
				expr: &litMatcher{
					pos:        position{line: 842, col: 14, offset: 31432},
					val:        "within",
					ignoreCase: false,
					want:       "\"within\"",
				},
			},
		},
		{
			name: "KW_CONTAINING",
			pos:  position{line: 843, col: 1, offset: 31472},
			expr: &actionExpr{
				pos: position{line: 843, col: 18, offset: 31489},
				run: (*parser).callonKW_CONTAINING1,
				expr: &litMatcher{
					pos:        position{line: 843, col: 18, offset: 31489},
					val:        "containing",
					ignoreCase: false,
					want:       "\"containing\"",
				},
			},
		},
		{
			name: "KW_MU",
			pos:  position{line: 844, col: 1, offset: 31533},
			expr: &actionExpr{
				pos: position{line: 844, col: 10, offset: 31542},
				run: (*parser).callonKW_MU1,
				expr: &litMatcher{
					pos:        position{line: 844, col: 10, offset: 31542},
					val:        "MU",
					ignoreCase: false,
					want:       "\"MU\"",
				},
			},
		},
		{
			name: "KW_FREQ",
			pos:  position{line: 845, col: 1, offset: 31578},
			expr: &actionExpr{
				pos: position{line: 845, col: 12, offset: 31589},
				run: (*parser).callonKW_FREQ1,
				expr: &litMatcher{
					pos:        position{line: 845, col: 12, offset: 31589},
					val:        "f",
					ignoreCase: false,
					want:       "\"f\"",
				},
			},
		},
		{
			name: "KW_WS",
			pos:  position{line: 846, col: 1, offset: 31624},
			expr: &actionExpr{
				pos: position{line: 846, col: 10, offset: 31633},
				run: (*parser).callonKW_WS1,
				expr: &litMatcher{
					pos:        position{line: 846, col: 10, offset: 31633},
					val:        "ws",
					ignoreCase: false,
					want:       "\"ws\"",
				},
			},
		},
		{
			name: "KW_TERM",
			pos:  position{line: 847, col: 1, offset: 31669},
			expr: &actionExpr{
				pos: position{line: 847, col: 12, offset: 31680},
				run: (*parser).callonKW_TERM1,
				expr: &litMatcher{
					pos:        position{line: 847, col: 12, offset: 31680},
					val:        "term",
					ignoreCase: false,
					want:       "\"term\"",
				},
			},
		},
		{
			name: "KW_SWAP",
			pos:  position{line: 848, col: 1, offset: 31718},
			expr: &actionExpr{
				pos: position{line: 848, col: 12, offset: 31729},
				run: (*parser).callonKW_SWAP1,
				expr: &litMatcher{
					pos:        position{line: 848, col: 12, offset: 31729},
					val:        "swap",
					ignoreCase: false,
					want:       "\"swap\"",
				},
			},
		},
		{
			name: "KW_CCOLL",
			pos:  position{line: 849, col: 1, offset: 31767},
			expr: &actionExpr{
				pos: position{line: 849, col: 13, offset: 31779},
				run: (*parser).callonKW_CCOLL1,
				expr: &litMatcher{
					pos:        position{line: 849, col: 13, offset: 31779},
					val:        "ccoll",
					ignoreCase: false,
					want:       "\"ccoll\"",
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 851, col: 1, offset: 31819},
			expr: &actionExpr{
				pos: position{line: 851, col: 6, offset: 31824},
				run: (*parser).callon_1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 851, col: 6, offset: 31824},
					expr: &charClassMatcher{
						pos:        position{line: 851, col: 6, offset: 31824},
						val:        "[ \\t\\n\\r]",
						chars:      []rune{' ', '\t', '\n', '\r'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 855, col: 1, offset: 31871},
			expr: &notExpr{
				pos: position{line: 855, col: 8, offset: 31878},
				expr: &anyMatcher{
					line: 855, col: 9, offset: 31879,
				},
			},
		},
	},
}

func (c *current) onQuery1(sq, gp, wc any) (any, error) {
	ans := &Query{
		origValue: string(c.text),
	}

	ans.Sequence = typedOrPanic[*Sequence](sq)

	if gp != nil {
		gpTyped := anyToSlice(gp)
		ans.GlobPart = fromIdxOfUntypedSlice[*GlobPart](gpTyped, 3)
	}

	fmt.Println("wc is: ", wc)
	wcSl := anyToSlice(wc)
	ans.WithinOrContaining = make([]*WithinOrContaining, 0, 10)
	for _, item := range wcSl {
		tItem := typedOrPanic[*WithinOrContaining](fromIdxOfUntypedSlice[*WithinOrContaining](item, 1))
		ans.WithinOrContaining = append(ans.WithinOrContaining, tItem)
	}

	return ans, nil

}

func (p *parser) callonQuery1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery1(stack["sq"], stack["gp"], stack["wc"])
}

func (c *current) onWithinOrContaining1(tp, w any) (any, error) {
	return &WithinOrContaining{
		WithinContainingPart: typedOrPanic[*WithinContainingPart](w),
		KwWithin:             typedOrPanic[string](tp),
	}, nil

}

func (p *parser) callonWithinOrContaining1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWithinOrContaining1(stack["tp"], stack["w"])
}

func (c *current) onGlobPart1(gc1, gc2 any) (any, error) {
	ans := &GlobPart{
		GlobCond: make([]*GlobCond, 0, 10),
	}

	gc1Typed := typedOrPanic[*GlobCond](gc1)
	ans.GlobCond = append(ans.GlobCond, gc1Typed)

	for _, item := range anyToSlice(gc2) {
		gc2Typed := typedOrPanic[*GlobCond](fromIdxOfUntypedSlice[*GlobCond](item, 3))
		ans.GlobCond = append(ans.GlobCond, gc2Typed)
	}
	return ans, nil

}

func (p *parser) callonGlobPart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPart1(stack["gc1"], stack["gc2"])
}

func (c *current) onGlobCond2(n1, an3, nt4, eq5, n6, an8 any) (any, error) {
	ans := &GlobCond{
		variant1: &globCondVariant1{},
	}
	ans.variant1.Number1 = typedOrPanic[string](n1)
	ans.variant1.AttName3 = typedOrPanic[string](an3)
	ans.variant1.Number6 = typedOrPanic[string](n6)
	ans.variant1.AttName8 = typedOrPanic[string](an8)
	return ans, nil

}

func (p *parser) callonGlobCond2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobCond2(stack["n1"], stack["an3"], stack["nt4"], stack["eq5"], stack["n6"], stack["an8"])
}

func (c *current) onGlobCond21(n2, an3 any) (any, error) {
	ans := &GlobCond{
		variant2: &globCondVariant2{
			Number2:  typedOrPanic[string](n2),
			AttName3: typedOrPanic[string](an3),
		},
	}
	return ans, nil

}

func (p *parser) callonGlobCond21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobCond21(stack["n2"], stack["an3"])
}

func (c *current) onWithinContainingPart2(s any) (any, error) {
	ans := &WithinContainingPart{
		variant1: &withinContainingPartVariant1{
			Sequence: typedOrPanic[*Sequence](s),
		},
	}
	return ans, nil

}

func (p *parser) callonWithinContainingPart2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWithinContainingPart2(stack["s"])
}

func (c *current) onWithinContainingPart5(w any) (any, error) {
	ans := &WithinContainingPart{
		variant2: &withinContainingPartVariant2{
			WithinNumber: typedOrPanic[*WithinNumber](w),
		},
	}

	return ans, nil

}

func (p *parser) callonWithinContainingPart5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWithinContainingPart5(stack["w"])
}

func (c *current) onWithinContainingPart8(a any) (any, error) {
	ans := &WithinContainingPart{
		variant3: &withinContainingPartVariant3{
			AlignedPart: typedOrPanic[*AlignedPart](a),
		},
	}

	return ans, nil

}

func (p *parser) callonWithinContainingPart8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWithinContainingPart8(stack["a"])
}

func (c *current) onStructure1(a, v any) (any, error) {
	ans := &Structure{
		AttName:    typedOrPanic[string](a),
		AttValList: typedOrPanic[*AttValList](v),
	}

	return ans, nil

}

func (p *parser) callonStructure1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructure1(stack["a"], stack["v"])
}

func (c *current) onNumberedPosition1(op any) (any, error) {
	ans := &NumberedPosition{
		OnePosition: typedOrPanic[*OnePosition](op),
	}

	return ans, nil

}

func (p *parser) callonNumberedPosition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberedPosition1(stack["op"])
}

func (c *current) onPosition2(op any) (any, error) {
	fmt.Println("########### Position1: ", string(c.text))
	return &Position{
		variant1: &positionVariant1{
			OnePosition: typedOrPanic[*OnePosition](op),
		},
	}, nil

}

func (p *parser) callonPosition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPosition2(stack["op"])
}

func (c *current) onPosition5(np any) (any, error) {
	fmt.Println("########### Position2: ", string(c.text))
	return &Position{
		variant2: &positionVariant2{
			NumberedPosition: typedOrPanic[*NumberedPosition](np),
		},
	}, nil

}

func (p *parser) callonPosition5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPosition5(stack["np"])
}

func (c *current) onOnePosition2(alist any) (any, error) {
	fmt.Println("########### OnePosition1: ", string(c.text))
	ans := &OnePosition{
		variant1: &onePositionVariant1{
			AttValList: typedOrPanic[*AttValList](alist),
		},
	}

	return ans, nil

}

func (p *parser) callonOnePosition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOnePosition2(stack["alist"])
}

func (c *current) onOnePosition11(rg any) (any, error) {
	fmt.Println("########### OnePosition2: ", string(c.text))
	ans := &OnePosition{
		variant2: &onePositionVariant2{
			RegExp: typedOrPanic[*RegExp](rg),
		},
	}

	return ans, nil

}

func (p *parser) callonOnePosition11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOnePosition11(stack["rg"])
}

func (c *current) onOnePosition14(num, rg any) (any, error) {
	fmt.Println("########### OnePosition3: ", string(c.text))
	ans := &OnePosition{
		variant3: &onePositionVariant3{
			Number: typedOrPanic[string](num),
			RegExp: typedOrPanic[*RegExp](rg),
		},
	}

	return ans, nil

}

func (p *parser) callonOnePosition14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOnePosition14(stack["num"], stack["rg"])
}

func (c *current) onOnePosition22() (any, error) {
	ans := &OnePosition{}

	return ans, nil

}

func (p *parser) callonOnePosition22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOnePosition22()
}

func (c *current) onOnePosition24(mu any) (any, error) {
	ans := &OnePosition{
		variant5: &onePositionVariant5{
			MuPart: typedOrPanic[*MuPart](mu),
		},
	}

	return ans, nil

}

func (p *parser) callonOnePosition24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOnePosition24(stack["mu"])
}

func (c *current) onMuPart1() (any, error) {
	ans := &MuPart{} // TODO

	return ans, nil

}

func (p *parser) callonMuPart1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMuPart1()
}

func (c *current) onInteger3() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonInteger3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger3()
}

func (c *current) onSequence2(s1, s2 any) (any, error) {
	fmt.Println("@@@@@@@@@@@@@@ Sequence: ", string(c.text))
	ans := &Sequence{}
	s1t := typedOrPanic[*Seq](s1)
	ans.Seq = make([]*Seq, 0, 10)
	ans.Seq = append(ans.Seq, s1t)

	return ans, nil

}

func (p *parser) callonSequence2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequence2(stack["s1"], stack["s2"])
}

func (c *current) onSequence13(s1 any) (any, error) {
	fmt.Println("@@@@@@@@@@@@@@ Sequence2: ", string(c.text))
	ans := &Sequence{
		Seq: []*Seq{typedOrPanic[*Seq](s1)},
	}

	return ans, nil

}

func (p *parser) callonSequence13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequence13(stack["s1"])
}

func (c *current) onSeq1(r1, r2 any) (any, error) {
	fmt.Println("############ Seq: ", string(c.text))
	ans := &Seq{}

	ans.Repetition = make([]*Repetition, 0, 10)
	ans.Repetition = append(ans.Repetition, typedOrPanic[*Repetition](r1))

	for _, item := range anyToSlice(r2) {
		tmp := fromIdxOfUntypedSlice[*Repetition](item, 1)
		ans.Repetition = append(ans.Repetition, tmp)
	}

	return ans, nil

}

func (p *parser) callonSeq1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["r1"], stack["r2"])
}

func (c *current) onRepetition2(aq, ro any) (any, error) {
	ans := &Repetition{
		variant1: &repetitionVariant1{
			AtomQuery: typedOrPanic[*AtomQuery](aq),
			RepOpt:    typedOrPanic[string](ro),
		},
	}

	return ans, nil

}

func (p *parser) callonRepetition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRepetition2(stack["aq"], stack["ro"])
}

func (c *current) onRepetition9(ost any) (any, error) {
	fmt.Println("############ Repetition2: ", string(c.text))
	ans := &Repetition{
		variant2: &repetitionVariant2{
			OpenStructTag: typedOrPanic[*OpenStructTag](ost),
		},
	}

	return ans, nil

}

func (p *parser) callonRepetition9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRepetition9(stack["ost"])
}

func (c *current) onRepetition12(cst any) (any, error) {
	fmt.Println("############ Repetition3: ", string(c.text))
	ans := &Repetition{
		variant3: &repetitionVariant3{
			CloseStructTag: typedOrPanic[*CloseStructTag](cst),
		},
	}

	return ans, nil

}

func (p *parser) callonRepetition12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRepetition12(stack["cst"])
}

func (c *current) onOpenStructTag1(s any) (any, error) {
	ans := &OpenStructTag{
		Structure: typedOrPanic[*Structure](s),
	}

	return ans, nil

}

func (p *parser) callonOpenStructTag1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenStructTag1(stack["s"])
}

func (c *current) onCloseStructTag1(s any) (any, error) {
	ans := &CloseStructTag{
		Structure: typedOrPanic[*Structure](s),
	}

	return ans, nil

}

func (p *parser) callonCloseStructTag1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCloseStructTag1(stack["s"])
}

func (c *current) onAtomQuery2(pos any) (any, error) {
	fmt.Println("################ AtomQuery1: ", string(c.text))
	ans := &AtomQuery{
		variant1: &atomQueryVariant1{
			Position: typedOrPanic[*Position](pos),
		},
	}

	return ans, nil

}

func (p *parser) callonAtomQuery2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomQuery2(stack["pos"])
}

func (c *current) onAtomQuery5(seq, wcp any) (any, error) {
	fmt.Println("################ AtomQuery2: ", string(c.text))
	ans := &AtomQuery{
		variant2: &atomQueryVariant2{
			Sequence: typedOrPanic[*Sequence](seq),
		},
	}

	return ans, nil

}

func (p *parser) callonAtomQuery5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomQuery5(stack["seq"], stack["wcp"])
}

func (c *current) onAttValList1(av1, av2 any) (any, error) {
	fmt.Println("########### AttValList: ", string(c.text))
	ans := &AttValList{
		AttValAnd: make([]*AttValAnd, 0, 10),
	}
	ans.AttValAnd = append(ans.AttValAnd, typedOrPanic[*AttValAnd](av1))

	for _, item := range anyToSlice(av2) {
		tmp := fromIdxOfUntypedSlice[*AttValAnd](item, 3)
		ans.AttValAnd = append(ans.AttValAnd, tmp)
	}

	return ans, nil

}

func (p *parser) callonAttValList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttValList1(stack["av1"], stack["av2"])
}

func (c *current) onAttValAnd1(av1, av2 any) (any, error) {
	fmt.Println("########### AttValAnd: ", string(c.text))
	ans := &AttValAnd{
		AttVal: make([]*AttVal, 0, 10),
	}
	ans.AttVal = append(ans.AttVal, typedOrPanic[*AttVal](av1))
	for _, item := range anyToSlice(av2) {
		tmp := fromIdxOfUntypedSlice[*AttVal](item, 3)
		ans.AttVal = append(ans.AttVal, tmp)
	}

	return ans, nil

}

func (p *parser) callonAttValAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttValAnd1(stack["av1"], stack["av2"])
}

func (c *current) onAttVal2(an, rs any) (any, error) {
	fmt.Println("########### AttVal1: ", string(c.text))
	ans := &AttVal{
		variant1: &attValVariant1{
			AttName:   typedOrPanic[string](an),
			RawString: typedOrPanic[*RawString](rs),
		},
	}

	return ans, nil

}

func (p *parser) callonAttVal2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttVal2(stack["an"], stack["rs"])
}

func (c *current) onAttVal13(an, op, rg any) (any, error) {
	fmt.Println("########### AttVal2: ", string(c.text))
	ans := &AttVal{
		variant2: &attValVariant2{
			AttName: typedOrPanic[string](an),
			RegExp:  typedOrPanic[*RegExp](rg),
		},
	}

	return ans, nil

}

func (p *parser) callonAttVal13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttVal13(stack["an"], stack["op"], stack["rg"])
}

func (c *current) onAttVal34() (any, error) {
	ans := &AttVal{}

	return ans, nil

}

func (p *parser) callonAttVal34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttVal34()
}

func (c *current) onAttVal40() (any, error) {
	ans := &AttVal{}

	return ans, nil

}

func (p *parser) callonAttVal40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttVal40()
}

func (c *current) onAttVal44() (any, error) {
	ans := &AttVal{}

	return ans, nil

}

func (p *parser) callonAttVal44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttVal44()
}

func (c *current) onAttVal48() (any, error) {
	fmt.Println("########### AttVal6: ", string(c.text))
	ans := &AttVal{}

	return ans, nil

}

func (p *parser) callonAttVal48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttVal48()
}

func (c *current) onAttVal55() (any, error) {
	fmt.Println("########### AttVal7: ", string(c.text))
	ans := &AttVal{}

	return ans, nil

}

func (p *parser) callonAttVal55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttVal55()
}

func (c *current) onAttVal75() (any, error) {
	fmt.Println("########### AttVal8: ", string(c.text))
	ans := &AttVal{}

	return ans, nil

}

func (p *parser) callonAttVal75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttVal75()
}

func (c *current) onAttVal85() (any, error) {
	fmt.Println("########### AttVal9: ", string(c.text))
	ans := &AttVal{}

	return ans, nil

}

func (p *parser) callonAttVal85() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttVal85()
}

func (c *current) onRepOpt2() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRepOpt2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRepOpt2()
}

func (c *current) onRepOpt4() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRepOpt4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRepOpt4()
}

func (c *current) onRepOpt6() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRepOpt6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRepOpt6()
}

func (c *current) onRepOpt8() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonRepOpt8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRepOpt8()
}

func (c *current) onAttName2() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAttName2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttName2()
}

func (c *current) onAttName4() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAttName4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttName4()
}

func (c *current) onRawString2(ss any) (any, error) {
	fmt.Println("################## RawString1: ", string(c.text))
	ans := &RawString{
		SimpleString: typedOrPanic[*SimpleString](ss),
	}

	return ans, nil

}

func (p *parser) callonRawString2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString2(stack["ss"])
}

func (c *current) onRawString8() (any, error) {
	return &RawString{SimpleString: &SimpleString{Values: []string{""}}}, nil

}

func (p *parser) callonRawString8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawString8()
}

func (c *current) onSimpleString1(values any) (any, error) {
	fmt.Println("################## SimpleString: ", string(c.text))
	ans := &SimpleString{
		Values: make([]string, len(anyToSlice(values))),
	}
	for i, item := range anyToSlice(values) {
		ans.Values[i] = typedOrPanic[string](item)
	}

	return ans, nil

}

func (p *parser) callonSimpleString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleString1(stack["values"])
}

func (c *current) onRegExp2(rer any) (any, error) {
	fmt.Println("###### RegExp: ", string(c.text))
	ans := &RegExp{
		RegExpRaw: typedOrPanic[*RegExpRaw](rer),
	}

	return ans, nil

}

func (p *parser) callonRegExp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegExp2(stack["rer"])
}

func (c *current) onRegExp8() (any, error) {
	fmt.Println("###### RegExp empty !!!")
	ans := &RegExp{
		RegExpRaw: &RegExpRaw{},
	}

	return ans, nil

}

func (p *parser) callonRegExp8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegExp8()
}

func (c *current) onRegExpRaw1(v any) (any, error) {
	fmt.Println("######################## RegExpRaw[0]: ", string(c.text))
	vSlice := anyToSlice(v)
	ans := &RegExpRaw{
		Values: make([]any, 0, len(vSlice)),
	}
	for _, item := range vSlice {
		ans.Values = append(ans.Values, item)
	}

	return ans, nil

}

func (p *parser) callonRegExpRaw1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegExpRaw1(stack["v"])
}

func (c *current) onRgGrouped1(rg any) (any, error) {
	fmt.Println("#### RgGrouped: ", string(c.text))
	ans := &RgGrouped{
		Value: typedOrPanic[*RegExpRaw](rg),
	}

	return ans, nil

}

func (p *parser) callonRgGrouped1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgGrouped1(stack["rg"])
}

func (c *current) onRgSimple1(v any) (any, error) {
	fmt.Println("#########################  RgSimple: ", string(c.text))
	vSlice := anyToSlice(v)
	ans := &RgSimple{
		Values: make([]any, 0, len(vSlice)),
	}
	for _, item := range vSlice {
		ans.Values = append(ans.Values, item)
	}

	return ans, nil

}

func (p *parser) callonRgSimple1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgSimple1(stack["v"])
}

func (c *current) onRgPosixClass1() (any, error) {
	fmt.Println("###### RgPosixClass: ", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonRgPosixClass1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgPosixClass1()
}

func (c *current) onRgLook1() (any, error) {
	fmt.Println("############ RgLook: ", string(c.text))
	// TODO
	ans := &RgLook{}

	return ans, nil

}

func (p *parser) callonRgLook1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgLook1()
}

func (c *current) onRgAlt1(v any) (any, error) {
	fmt.Println("======= WE HAVE ALT ", string(c.text))
	ans := &RgAlt{
		Values: make([]*RgAltVal, 0, 10),
	}
	for _, item := range anyToSlice(v) {
		fmt.Println(">>>> ITEM: ", item)
		ans.Values = append(ans.Values, typedOrPanic[*RgAltVal](item))
	}

	return ans, nil

}

func (p *parser) callonRgAlt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgAlt1(stack["v"])
}

func (c *current) onRgAltVal2(v any) (any, error) {
	ans := &RgAltVal{
		variant1: &rgAltValVariant1{
			RgChar: typedOrPanic[*RgChar](v),
		},
	}

	return ans, nil

}

func (p *parser) callonRgAltVal2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgAltVal2(stack["v"])
}

func (c *current) onRgAltVal5(v any) (any, error) {
	ans := &RgAltVal{
		variant2: &rgAltValVariant2{
			Value: typedOrPanic[string](v),
		},
	}

	return ans, nil

}

func (p *parser) callonRgAltVal5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgAltVal5(stack["v"])
}

func (c *current) onRgChar2(rg any) (any, error) {
	fmt.Println("###### RgChar1 ", string(c.text))
	ans := &RgChar{
		variant1: &rgCharVariant1{
			Value: typedOrPanic[string](rg),
		},
	}

	return ans, nil

}

func (p *parser) callonRgChar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgChar2(stack["rg"])
}

func (c *current) onRgChar5(rg any) (any, error) {
	fmt.Println("###### RgChar2 ", string(c.text))
	ans := &RgChar{
		variant1: &rgCharVariant1{
			Value: typedOrPanic[string](rg),
		},
	}

	return ans, nil

}

func (p *parser) callonRgChar5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgChar5(stack["rg"])
}

func (c *current) onRgChar8(rg any) (any, error) {
	fmt.Println("###### RgChar3 ", string(c.text))
	ans := &RgChar{
		variant2: &rgCharVariant2{
			Value: typedOrPanic[*RgOp](rg),
		},
	}

	return ans, nil

}

func (p *parser) callonRgChar8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgChar8(stack["rg"])
}

func (c *current) onRgChar11(rg any) (any, error) {
	fmt.Println("###### RgChar4 ", string(c.text))
	ans := &RgChar{
		variant1: &rgCharVariant1{
			Value: typedOrPanic[string](rg),
		},
	}

	return ans, nil

}

func (p *parser) callonRgChar11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgChar11(stack["rg"])
}

func (c *current) onRgChar14(rg any) (any, error) {
	fmt.Println("###### RgChar5 ", string(c.text))
	ans := &RgChar{
		variant1: &rgCharVariant1{
			Value: typedOrPanic[string](rg),
		},
	}

	return ans, nil

}

func (p *parser) callonRgChar14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgChar14(stack["rg"])
}

func (c *current) onRgChar17(rg any) (any, error) {
	fmt.Println("###### RgChar6 ", string(c.text))
	ans := &RgChar{
		variant1: &rgCharVariant1{
			Value: typedOrPanic[string](rg),
		},
	}

	return ans, nil

}

func (p *parser) callonRgChar17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgChar17(stack["rg"])
}

func (c *current) onRgChar20(rg any) (any, error) {
	fmt.Println("###### RgChar7 ", string(c.text))
	ans := &RgChar{
		variant1: &rgCharVariant1{
			Value: typedOrPanic[string](rg),
		},
	}

	return ans, nil

}

func (p *parser) callonRgChar20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgChar20(stack["rg"])
}

func (c *current) onRG_OP2(v any) (any, error) {
	fmt.Println("#### RgOp1: ", string(c.text))
	ans := &RgOp{
		Value: string(c.text),
	}

	return ans, nil

}

func (p *parser) callonRG_OP2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRG_OP2(stack["v"])
}

func (c *current) onRG_OP5(v any) (any, error) {
	fmt.Println("#### RgOp2: ", string(c.text))
	ans := &RgOp{
		Value: string(c.text),
	}

	return ans, nil

}

func (p *parser) callonRG_OP5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRG_OP5(stack["v"])
}

func (c *current) onRgRange1(rg any) (any, error) {
	fmt.Println("### RgRange: ", string(c.text))
	ans := &RgRange{
		RgRangeSpec: typedOrPanic[*RgRangeSpec](rg),
	}

	return ans, nil

}

func (p *parser) callonRgRange1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgRange1(stack["rg"])
}

func (c *current) onRgRangeSpec2(n1, n2 any) (any, error) {
	ans := &RgRangeSpec{
		Number1: typedOrPanic[string](n1),
		Number2: typedOrPanic[string](n2),
	}
	return ans, nil

}

func (p *parser) callonRgRangeSpec2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgRangeSpec2(stack["n1"], stack["n2"])
}

func (c *current) onRgRangeSpec10(n1 any) (any, error) {
	ans := &RgRangeSpec{
		Number1: typedOrPanic[string](n1),
	}
	return ans, nil

}

func (p *parser) callonRgRangeSpec10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRgRangeSpec10(stack["n1"])
}

func (c *current) onAnyLetter2() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAnyLetter2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyLetter2()
}

func (c *current) onAnyLetter4() (any, error) {
	return string(c.text), nil

}

func (p *parser) callonAnyLetter4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyLetter4()
}

func (c *current) onNUMBER1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNUMBER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onNNUMBER1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNNUMBER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNNUMBER1()
}

func (c *current) onASCII_LETTERS1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonASCII_LETTERS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASCII_LETTERS1()
}

func (c *current) onATTR_CHARS1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonATTR_CHARS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onATTR_CHARS1()
}

func (c *current) onQUOT1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonQUOT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQUOT1()
}

func (c *current) onDASH1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDASH1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDASH1()
}

func (c *current) onLPAREN1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLPAREN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLPAREN1()
}

func (c *current) onRPAREN1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRPAREN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRPAREN1()
}

func (c *current) onLBRACKET1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLBRACKET1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLBRACKET1()
}

func (c *current) onRBRACKET1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRBRACKET1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRBRACKET1()
}

func (c *current) onLBRACE1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLBRACE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLBRACE1()
}

func (c *current) onRBRACE1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRBRACE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRBRACE1()
}

func (c *current) onSTAR1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSTAR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTAR1()
}

func (c *current) onPLUS1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPLUS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPLUS1()
}

func (c *current) onQUEST1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonQUEST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQUEST1()
}

func (c *current) onBINOR1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonBINOR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBINOR1()
}

func (c *current) onBINAND1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonBINAND1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBINAND1()
}

func (c *current) onDOT1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDOT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDOT1()
}

func (c *current) onCOMMA1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCOMMA1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMA1()
}

func (c *current) onSEMI1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSEMI1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSEMI1()
}

func (c *current) onCOLON1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCOLON1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOLON1()
}

func (c *current) onEEQ1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEEQ1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEEQ1()
}

func (c *current) onEQ1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonEQ1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEQ1()
}

func (c *current) onTEQ1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTEQ1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTEQ1()
}

func (c *current) onNOT1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNOT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNOT1()
}

func (c *current) onLEQ1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLEQ1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEQ1()
}

func (c *current) onGEQ1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonGEQ1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGEQ1()
}

func (c *current) onLSTRUCT1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLSTRUCT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLSTRUCT1()
}

func (c *current) onRSTRUCT1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRSTRUCT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRSTRUCT1()
}

func (c *current) onSLASH1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSLASH1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSLASH1()
}

func (c *current) onPOSNUM1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonPOSNUM1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPOSNUM1()
}

func (c *current) onKW_MEET1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKW_MEET1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKW_MEET1()
}

func (c *current) onKW_UNION1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKW_UNION1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKW_UNION1()
}

func (c *current) onKW_WITHIN1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKW_WITHIN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKW_WITHIN1()
}

func (c *current) onKW_CONTAINING1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKW_CONTAINING1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKW_CONTAINING1()
}

func (c *current) onKW_MU1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKW_MU1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKW_MU1()
}

func (c *current) onKW_FREQ1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKW_FREQ1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKW_FREQ1()
}

func (c *current) onKW_WS1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKW_WS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKW_WS1()
}

func (c *current) onKW_TERM1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKW_TERM1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKW_TERM1()
}

func (c *current) onKW_SWAP1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKW_SWAP1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKW_SWAP1()
}

func (c *current) onKW_CCOLL1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKW_CCOLL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKW_CCOLL1()
}

func (c *current) on_1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callon_1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
